# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # UsersController
  class UsersController < BaseController
    # Get detailed profile information about the current user (including the
    # current user's username).
    # @return [PrivateUserObject] response from the API call.
    def get_current_users_profile
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/me',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(PrivateUserObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get public profile information about a Spotify user.
    # @param [String] user_id Required parameter: Example:
    # @return [PublicUserObject] response from the API call.
    def get_users_profile(user_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/users/{user_id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(user_id, key: 'user_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(PublicUserObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Add the current user as a follower of a playlist.
    # @param [String] playlist_id Required parameter: Example:
    # @param [PlaylistsFollowersRequest] body Optional parameter: Example:
    # @return [void] response from the API call.
    def follow_playlist(playlist_id,
                        body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/playlists/{playlist_id}/followers',
                                     Server::DEFAULT)
                   .template_param(new_parameter(playlist_id, key: 'playlist_id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Remove the current user as a follower of a playlist.
    # @param [String] playlist_id Required parameter: Example:
    # @return [void] response from the API call.
    def unfollow_playlist(playlist_id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/playlists/{playlist_id}/followers',
                                     Server::DEFAULT)
                   .template_param(new_parameter(playlist_id, key: 'playlist_id')
                                    .should_encode(true))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get the current user's followed artists.
    # @param [ItemType1Enum] type Required parameter: Example:
    # @param [String] after Optional parameter: Example:
    # @param [Integer] limit Optional parameter: Example:20
    # @return [CursorPagedArtists] response from the API call.
    def get_followed(type,
                     after: nil,
                     limit: 20)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/me/following',
                                     Server::DEFAULT)
                   .query_param(new_parameter(type, key: 'type'))
                   .query_param(new_parameter(after, key: 'after'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(CursorPagedArtists.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Add the current user as a follower of one or more artists or other Spotify
    # users.
    # @param [ItemType2Enum] type Required parameter: Example:
    # @param [String] ids Required parameter: Example:
    # @param [MeFollowingRequest] body Optional parameter: Example:
    # @return [void] response from the API call.
    def follow_artists_users(type,
                             ids,
                             body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/me/following',
                                     Server::DEFAULT)
                   .query_param(new_parameter(type, key: 'type'))
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Remove the current user as a follower of one or more artists or other
    # Spotify users.
    # @param [ItemType3Enum] type Required parameter: Example:
    # @param [String] ids Required parameter: Example:
    # @param [MeFollowingRequest1] body Optional parameter: Example:
    # @return [void] response from the API call.
    def unfollow_artists_users(type,
                               ids,
                               body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/me/following',
                                     Server::DEFAULT)
                   .query_param(new_parameter(type, key: 'type'))
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Check to see if the current user is following one or more artists or other
    # Spotify users.
    # @param [ItemType3Enum] type Required parameter: Example:
    # @param [String] ids Required parameter: Example:
    # @return [Array[TrueClass | FalseClass]] response from the API call.
    def check_current_user_follows(type,
                                   ids)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/me/following/contains',
                                     Server::DEFAULT)
                   .query_param(new_parameter(type, key: 'type'))
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:deserialize_primitive_types))
                    .is_response_array(true)
                    .is_primitive_response(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Check to see if one or more Spotify users are following a specified
    # playlist.
    # @param [String] playlist_id Required parameter: Example:
    # @param [String] ids Required parameter: Example:
    # @return [Array[TrueClass | FalseClass]] response from the API call.
    def check_if_user_follows_playlist(playlist_id,
                                       ids)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/playlists/{playlist_id}/followers/contains',
                                     Server::DEFAULT)
                   .template_param(new_parameter(playlist_id, key: 'playlist_id')
                                    .should_encode(true))
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:deserialize_primitive_types))
                    .is_response_array(true)
                    .is_primitive_response(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get the current user's top artists based on calculated affinity.
    # @param [String] time_range Optional parameter: Example:medium_term
    # @param [Integer] limit Optional parameter: Example:20
    # @param [Integer] offset Optional parameter: Example:0
    # @return [PagingArtistObject] response from the API call.
    def get_users_top_artists(time_range: 'medium_term',
                              limit: 20,
                              offset: 0)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/me/top/artists',
                                     Server::DEFAULT)
                   .query_param(new_parameter(time_range, key: 'time_range'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(offset, key: 'offset'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(PagingArtistObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get the current user's top tracks based on calculated affinity.
    # @param [String] time_range Optional parameter: Example:medium_term
    # @param [Integer] limit Optional parameter: Example:20
    # @param [Integer] offset Optional parameter: Example:0
    # @return [PagingTrackObject] response from the API call.
    def get_users_top_tracks(time_range: 'medium_term',
                             limit: 20,
                             offset: 0)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/me/top/tracks',
                                     Server::DEFAULT)
                   .query_param(new_parameter(time_range, key: 'time_range'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(offset, key: 'offset'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(PagingTrackObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end
  end
end
