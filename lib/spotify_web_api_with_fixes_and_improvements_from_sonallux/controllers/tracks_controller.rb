# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # TracksController
  class TracksController < BaseController
    # Get Spotify catalog information for a single track identified by its
    # unique Spotify ID.
    # @param [String] id Required parameter: Example:
    # @param [String] market Optional parameter: Example:
    # @return [TrackObject] response from the API call.
    def get_track(id,
                  market: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/tracks/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .query_param(new_parameter(market, key: 'market'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(TrackObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get Spotify catalog information for multiple tracks based on their Spotify
    # IDs.
    # @param [String] ids Required parameter: Example:
    # @param [String] market Optional parameter: Example:
    # @return [ManyTracks] response from the API call.
    def get_several_tracks(ids,
                           market: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/tracks',
                                     Server::DEFAULT)
                   .query_param(new_parameter(ids, key: 'ids'))
                   .query_param(new_parameter(market, key: 'market'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ManyTracks.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get a list of the songs saved in the current Spotify user's 'Your Music'
    # library.
    # @param [String] market Optional parameter: Example:
    # @param [Integer] limit Optional parameter: Example:20
    # @param [Integer] offset Optional parameter: Example:0
    # @return [PagingSavedTrackObject] response from the API call.
    def get_users_saved_tracks(market: nil,
                               limit: 20,
                               offset: 0)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/me/tracks',
                                     Server::DEFAULT)
                   .query_param(new_parameter(market, key: 'market'))
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(offset, key: 'offset'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(PagingSavedTrackObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Save one or more tracks to the current user's 'Your Music' library.
    # @param [String] ids Required parameter: Example:
    # @param [MeTracksRequest] body Optional parameter: Example:
    # @return [void] response from the API call.
    def save_tracks_user(ids,
                         body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::PUT,
                                     '/me/tracks',
                                     Server::DEFAULT)
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Remove one or more tracks from the current user's 'Your Music' library.
    # @param [String] ids Required parameter: Example:
    # @param [MeTracksRequest1] body Optional parameter: Example:
    # @return [void] response from the API call.
    def remove_tracks_user(ids,
                           body: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::DELETE,
                                     '/me/tracks',
                                     Server::DEFAULT)
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end)
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .is_response_void(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Check if one or more tracks is already saved in the current Spotify user's
    # 'Your Music' library.
    # @param [String] ids Required parameter: Example:
    # @return [Array[TrueClass | FalseClass]] response from the API call.
    def check_users_saved_tracks(ids)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/me/tracks/contains',
                                     Server::DEFAULT)
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:deserialize_primitive_types))
                    .is_response_array(true)
                    .is_primitive_response(true)
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get audio features for multiple tracks based on their Spotify IDs.
    # @param [String] ids Required parameter: Example:
    # @return [ManyAudioFeatures] response from the API call.
    def get_several_audio_features(ids)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/audio-features',
                                     Server::DEFAULT)
                   .query_param(new_parameter(ids, key: 'ids'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ManyAudioFeatures.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get audio feature information for a single track identified by its unique
    # Spotify ID.
    # @param [String] id Required parameter: Example:
    # @return [AudioFeaturesObject] response from the API call.
    def get_audio_features(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/audio-features/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(AudioFeaturesObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Get a low-level audio analysis for a track in the Spotify catalog. The
    # audio analysis describes the track’s structure and musical content,
    # including rhythm, pitch, and timbre.
    # @param [String] id Required parameter: Example:
    # @return [AudioAnalysisObject] response from the API call.
    def get_audio_analysis(id)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/audio-analysis/{id}',
                                     Server::DEFAULT)
                   .template_param(new_parameter(id, key: 'id')
                                    .should_encode(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(AudioAnalysisObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end

    # Recommendations are generated based on the available information for a
    # given seed entity and matched against similar artists and tracks. If there
    # is sufficient information about the provided seeds, a list of tracks will
    # be returned together with pool size details.
    # For artists and tracks that are very new or obscure there might not be
    # enough data to generate a list of tracks.
    # @param [Integer] limit Optional parameter: Example:20
    # @param [String] market Optional parameter: Example:
    # @param [String] seed_artists Optional parameter: Example:
    # @param [String] seed_genres Optional parameter: Example:
    # @param [String] seed_tracks Optional parameter: Example:
    # @param [Float] min_acousticness Optional parameter: Example:
    # @param [Float] max_acousticness Optional parameter: Example:
    # @param [Float] target_acousticness Optional parameter: Example:
    # @param [Float] min_danceability Optional parameter: Example:
    # @param [Float] max_danceability Optional parameter: Example:
    # @param [Float] target_danceability Optional parameter: Example:
    # @param [Integer] min_duration_ms Optional parameter: Example:
    # @param [Integer] max_duration_ms Optional parameter: Example:
    # @param [Integer] target_duration_ms Optional parameter: Example:
    # @param [Float] min_energy Optional parameter: Example:
    # @param [Float] max_energy Optional parameter: Example:
    # @param [Float] target_energy Optional parameter: Example:
    # @param [Float] min_instrumentalness Optional parameter: Example:
    # @param [Float] max_instrumentalness Optional parameter: Example:
    # @param [Float] target_instrumentalness Optional parameter: Example:
    # @param [Integer] min_key Optional parameter: Example:
    # @param [Integer] max_key Optional parameter: Example:
    # @param [Integer] target_key Optional parameter: Example:
    # @param [Float] min_liveness Optional parameter: Example:
    # @param [Float] max_liveness Optional parameter: Example:
    # @param [Float] target_liveness Optional parameter: Example:
    # @param [Float] min_loudness Optional parameter: Example:
    # @param [Float] max_loudness Optional parameter: Example:
    # @param [Float] target_loudness Optional parameter: Example:
    # @param [Integer] min_mode Optional parameter: Example:
    # @param [Integer] max_mode Optional parameter: Example:
    # @param [Integer] target_mode Optional parameter: Example:
    # @param [Integer] min_popularity Optional parameter: Example:
    # @param [Integer] max_popularity Optional parameter: Example:
    # @param [Integer] target_popularity Optional parameter: Example:
    # @param [Float] min_speechiness Optional parameter: Example:
    # @param [Float] max_speechiness Optional parameter: Example:
    # @param [Float] target_speechiness Optional parameter: Example:
    # @param [Float] min_tempo Optional parameter: Example:
    # @param [Float] max_tempo Optional parameter: Example:
    # @param [Float] target_tempo Optional parameter: Example:
    # @param [Integer] min_time_signature Optional parameter: Example:
    # @param [Integer] max_time_signature Optional parameter: Example:
    # @param [Integer] target_time_signature Optional parameter: Example:
    # @param [Float] min_valence Optional parameter: Example:
    # @param [Float] max_valence Optional parameter: Example:
    # @param [Float] target_valence Optional parameter: Example:
    # @return [RecommendationsObject] response from the API call.
    def get_recommendations(limit: 20,
                            market: nil,
                            seed_artists: nil,
                            seed_genres: nil,
                            seed_tracks: nil,
                            min_acousticness: nil,
                            max_acousticness: nil,
                            target_acousticness: nil,
                            min_danceability: nil,
                            max_danceability: nil,
                            target_danceability: nil,
                            min_duration_ms: nil,
                            max_duration_ms: nil,
                            target_duration_ms: nil,
                            min_energy: nil,
                            max_energy: nil,
                            target_energy: nil,
                            min_instrumentalness: nil,
                            max_instrumentalness: nil,
                            target_instrumentalness: nil,
                            min_key: nil,
                            max_key: nil,
                            target_key: nil,
                            min_liveness: nil,
                            max_liveness: nil,
                            target_liveness: nil,
                            min_loudness: nil,
                            max_loudness: nil,
                            target_loudness: nil,
                            min_mode: nil,
                            max_mode: nil,
                            target_mode: nil,
                            min_popularity: nil,
                            max_popularity: nil,
                            target_popularity: nil,
                            min_speechiness: nil,
                            max_speechiness: nil,
                            target_speechiness: nil,
                            min_tempo: nil,
                            max_tempo: nil,
                            target_tempo: nil,
                            min_time_signature: nil,
                            max_time_signature: nil,
                            target_time_signature: nil,
                            min_valence: nil,
                            max_valence: nil,
                            target_valence: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/recommendations',
                                     Server::DEFAULT)
                   .query_param(new_parameter(limit, key: 'limit'))
                   .query_param(new_parameter(market, key: 'market'))
                   .query_param(new_parameter(seed_artists, key: 'seed_artists'))
                   .query_param(new_parameter(seed_genres, key: 'seed_genres'))
                   .query_param(new_parameter(seed_tracks, key: 'seed_tracks'))
                   .query_param(new_parameter(min_acousticness, key: 'min_acousticness'))
                   .query_param(new_parameter(max_acousticness, key: 'max_acousticness'))
                   .query_param(new_parameter(target_acousticness, key: 'target_acousticness'))
                   .query_param(new_parameter(min_danceability, key: 'min_danceability'))
                   .query_param(new_parameter(max_danceability, key: 'max_danceability'))
                   .query_param(new_parameter(target_danceability, key: 'target_danceability'))
                   .query_param(new_parameter(min_duration_ms, key: 'min_duration_ms'))
                   .query_param(new_parameter(max_duration_ms, key: 'max_duration_ms'))
                   .query_param(new_parameter(target_duration_ms, key: 'target_duration_ms'))
                   .query_param(new_parameter(min_energy, key: 'min_energy'))
                   .query_param(new_parameter(max_energy, key: 'max_energy'))
                   .query_param(new_parameter(target_energy, key: 'target_energy'))
                   .query_param(new_parameter(min_instrumentalness, key: 'min_instrumentalness'))
                   .query_param(new_parameter(max_instrumentalness, key: 'max_instrumentalness'))
                   .query_param(new_parameter(target_instrumentalness, key: 'target_instrumentalness'))
                   .query_param(new_parameter(min_key, key: 'min_key'))
                   .query_param(new_parameter(max_key, key: 'max_key'))
                   .query_param(new_parameter(target_key, key: 'target_key'))
                   .query_param(new_parameter(min_liveness, key: 'min_liveness'))
                   .query_param(new_parameter(max_liveness, key: 'max_liveness'))
                   .query_param(new_parameter(target_liveness, key: 'target_liveness'))
                   .query_param(new_parameter(min_loudness, key: 'min_loudness'))
                   .query_param(new_parameter(max_loudness, key: 'max_loudness'))
                   .query_param(new_parameter(target_loudness, key: 'target_loudness'))
                   .query_param(new_parameter(min_mode, key: 'min_mode'))
                   .query_param(new_parameter(max_mode, key: 'max_mode'))
                   .query_param(new_parameter(target_mode, key: 'target_mode'))
                   .query_param(new_parameter(min_popularity, key: 'min_popularity'))
                   .query_param(new_parameter(max_popularity, key: 'max_popularity'))
                   .query_param(new_parameter(target_popularity, key: 'target_popularity'))
                   .query_param(new_parameter(min_speechiness, key: 'min_speechiness'))
                   .query_param(new_parameter(max_speechiness, key: 'max_speechiness'))
                   .query_param(new_parameter(target_speechiness, key: 'target_speechiness'))
                   .query_param(new_parameter(min_tempo, key: 'min_tempo'))
                   .query_param(new_parameter(max_tempo, key: 'max_tempo'))
                   .query_param(new_parameter(target_tempo, key: 'target_tempo'))
                   .query_param(new_parameter(min_time_signature, key: 'min_time_signature'))
                   .query_param(new_parameter(max_time_signature, key: 'max_time_signature'))
                   .query_param(new_parameter(target_time_signature, key: 'target_time_signature'))
                   .query_param(new_parameter(min_valence, key: 'min_valence'))
                   .query_param(new_parameter(max_valence, key: 'max_valence'))
                   .query_param(new_parameter(target_valence, key: 'target_valence'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .auth(Single.new('oauth_2_0')))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(RecommendationsObject.method(:from_hash))
                    .local_error('401',
                                 "Bad or expired token. This can happen if the user revoked a'\
                                  ' token or\nthe access token has expired. You should'\
                                  ' re-authenticate the user.\n",
                                 UnauthorizedException)
                    .local_error('403',
                                 "Bad OAuth request (wrong consumer key, bad nonce, expired'\
                                  '\ntimestamp...). Unfortunately, re-authenticating the user'\
                                  ' won't help here.\n",
                                 ForbiddenException)
                    .local_error('429',
                                 "The app has exceeded its rate limits.\n",
                                 TooManyRequestsException))
        .execute
    end
  end
end
