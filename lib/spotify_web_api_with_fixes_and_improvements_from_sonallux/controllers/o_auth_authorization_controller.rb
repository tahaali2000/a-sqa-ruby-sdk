# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # OAuthAuthorizationController
  class OAuthAuthorizationController < BaseController
    # Create a new OAuth 2 token.
    # @param [String] authorization Required parameter: Authorization header in
    # Basic auth format
    # @param [String] code Required parameter: Authorization Code
    # @param [String] redirect_uri Required parameter: Redirect Uri
    # @param [Hash] _field_parameters Additional optional form parameters are
    # supported by this endpoint.
    # @return [OAuthToken] response from the API call.
    def request_token(authorization,
                      code,
                      redirect_uri,
                      _field_parameters: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/token',
                                     Server::AUTH_SERVER)
                   .form_param(new_parameter('authorization_code', key: 'grant_type'))
                   .header_param(new_parameter(authorization, key: 'Authorization'))
                   .form_param(new_parameter(code, key: 'code'))
                   .form_param(new_parameter(redirect_uri, key: 'redirect_uri'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .additional_form_params(_field_parameters))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(OAuthToken.method(:from_hash))
                    .local_error('400',
                                 'OAuth 2 provider returned an error.',
                                 OAuthProviderException)
                    .local_error('401',
                                 'OAuth 2 provider says client authentication failed.',
                                 OAuthProviderException))
        .execute
    end

    # Obtain a new access token using a refresh token
    # @param [String] authorization Required parameter: Authorization header in
    # Basic auth format
    # @param [String] refresh_token Required parameter: Refresh token
    # @param [String] scope Optional parameter: Requested scopes as a
    # space-delimited list.
    # @param [Hash] _field_parameters Additional optional form parameters are
    # supported by this endpoint.
    # @return [OAuthToken] response from the API call.
    def refresh_token(authorization,
                      refresh_token,
                      scope: nil,
                      _field_parameters: nil)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/api/token',
                                     Server::AUTH_SERVER)
                   .form_param(new_parameter('refresh_token', key: 'grant_type'))
                   .header_param(new_parameter(authorization, key: 'Authorization'))
                   .form_param(new_parameter(refresh_token, key: 'refresh_token'))
                   .form_param(new_parameter(scope, key: 'scope'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .additional_form_params(_field_parameters))
        .response(new_response_handler
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(OAuthToken.method(:from_hash))
                    .local_error('400',
                                 'OAuth 2 provider returned an error.',
                                 OAuthProviderException)
                    .local_error('401',
                                 'OAuth 2 provider says client authentication failed.',
                                 OAuthProviderException))
        .execute
    end
  end
end
