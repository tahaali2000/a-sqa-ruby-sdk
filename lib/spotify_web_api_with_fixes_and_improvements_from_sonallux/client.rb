# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  #  spotify_web_api_with_fixes_and_improvements_from_sonallux client class.
  class Client
    include CoreLibrary
    attr_reader :config, :auth_managers

    # Returns the configured authentication oauth_2_0 instance.
    def oauth_2_0
      @auth_managers['oauth_2_0']
    end

    # Access to albums controller.
    # @return [AlbumsController] Returns the controller instance.
    def albums
      @albums ||= AlbumsController.new @global_configuration
    end

    # Access to artists controller.
    # @return [ArtistsController] Returns the controller instance.
    def artists
      @artists ||= ArtistsController.new @global_configuration
    end

    # Access to audiobooks controller.
    # @return [AudiobooksController] Returns the controller instance.
    def audiobooks
      @audiobooks ||= AudiobooksController.new @global_configuration
    end

    # Access to categories controller.
    # @return [CategoriesController] Returns the controller instance.
    def categories
      @categories ||= CategoriesController.new @global_configuration
    end

    # Access to chapters controller.
    # @return [ChaptersController] Returns the controller instance.
    def chapters
      @chapters ||= ChaptersController.new @global_configuration
    end

    # Access to episodes controller.
    # @return [EpisodesController] Returns the controller instance.
    def episodes
      @episodes ||= EpisodesController.new @global_configuration
    end

    # Access to genres controller.
    # @return [GenresController] Returns the controller instance.
    def genres
      @genres ||= GenresController.new @global_configuration
    end

    # Access to markets controller.
    # @return [MarketsController] Returns the controller instance.
    def markets
      @markets ||= MarketsController.new @global_configuration
    end

    # Access to player controller.
    # @return [PlayerController] Returns the controller instance.
    def player
      @player ||= PlayerController.new @global_configuration
    end

    # Access to playlists controller.
    # @return [PlaylistsController] Returns the controller instance.
    def playlists
      @playlists ||= PlaylistsController.new @global_configuration
    end

    # Access to search controller.
    # @return [SearchController] Returns the controller instance.
    def search
      @search ||= SearchController.new @global_configuration
    end

    # Access to shows controller.
    # @return [ShowsController] Returns the controller instance.
    def shows
      @shows ||= ShowsController.new @global_configuration
    end

    # Access to tracks controller.
    # @return [TracksController] Returns the controller instance.
    def tracks
      @tracks ||= TracksController.new @global_configuration
    end

    # Access to users controller.
    # @return [UsersController] Returns the controller instance.
    def users
      @users ||= UsersController.new @global_configuration
    end

    # Access to o_auth_authorization controller.
    # @return [OAuthAuthorizationController] Returns the controller instance.
    def o_auth_authorization
      @o_auth_authorization ||= OAuthAuthorizationController.new @global_configuration
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put], http_callback: nil,
      environment: Environment::PRODUCTION, o_auth_client_id: nil,
      o_auth_client_secret: nil, o_auth_redirect_uri: nil, o_auth_token: nil,
      o_auth_scopes: nil, authorization_code_auth_credentials: nil, config: nil
    )
      @config = if config.nil?
                  Configuration.new(
                    connection: connection, adapter: adapter, timeout: timeout,
                    max_retries: max_retries, retry_interval: retry_interval,
                    backoff_factor: backoff_factor,
                    retry_statuses: retry_statuses,
                    retry_methods: retry_methods, http_callback: http_callback,
                    environment: environment,
                    o_auth_client_id: o_auth_client_id,
                    o_auth_client_secret: o_auth_client_secret,
                    o_auth_redirect_uri: o_auth_redirect_uri,
                    o_auth_token: o_auth_token, o_auth_scopes: o_auth_scopes,
                    authorization_code_auth_credentials: authorization_code_auth_credentials
                  )
                else
                  config
                end

      @global_configuration = GlobalConfiguration.new(client_configuration: @config)
                                                 .base_uri_executor(@config.method(:get_base_uri))
                                                 .global_errors(BaseController::GLOBAL_ERRORS)
                                                 .user_agent(BaseController.user_agent)

      initialize_auth_managers(@global_configuration)
      @global_configuration = @global_configuration.auth_managers(@auth_managers)
    end

    # Initializes the auth managers hash used for authenticating API calls.
    # @param [GlobalConfiguration] global_config The global configuration of the SDK)
    def initialize_auth_managers(global_config)
      @auth_managers = {}
      http_client_config = global_config.client_configuration
      %w[oauth_2_0].each { |auth| @auth_managers[auth] = nil }
      @auth_managers['oauth_2_0'] = OAuth2.new(
        http_client_config.authorization_code_auth_credentials, global_config
      )
    end
  end
end
