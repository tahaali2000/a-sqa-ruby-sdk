# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # An enum for SDK environments.
  class Environment
    ENVIRONMENT = [
      PRODUCTION = 'production'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      DEFAULT = 'default'.freeze,
      AUTH_SERVER = 'auth server'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration < CoreLibrary::HttpClientConfiguration
    def o_auth_client_id
      @authorization_code_auth_credentials.o_auth_client_id
    end

    def o_auth_client_secret
      @authorization_code_auth_credentials.o_auth_client_secret
    end

    def o_auth_redirect_uri
      @authorization_code_auth_credentials.o_auth_redirect_uri
    end

    def o_auth_token
      @authorization_code_auth_credentials.o_auth_token
    end

    def o_auth_scopes
      @authorization_code_auth_credentials.o_auth_scopes
    end

    # The attribute readers for properties.
    attr_reader :environment, :authorization_code_auth_credentials

    class << self
      attr_reader :environments
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put], http_callback: nil,
      environment: Environment::PRODUCTION, o_auth_client_id: nil,
      o_auth_client_secret: nil, o_auth_redirect_uri: nil, o_auth_token: nil,
      o_auth_scopes: nil, authorization_code_auth_credentials: nil
    )

      super connection: connection, adapter: adapter, timeout: timeout,
            max_retries: max_retries, retry_interval: retry_interval,
            backoff_factor: backoff_factor, retry_statuses: retry_statuses,
            retry_methods: retry_methods, http_callback: http_callback

      # Current API environment
      @environment = String(environment)

      # OAuth 2 Client ID
      @o_auth_client_id = o_auth_client_id

      # OAuth 2 Client Secret
      @o_auth_client_secret = o_auth_client_secret

      # OAuth 2 Redirection endpoint or Callback Uri
      @o_auth_redirect_uri = o_auth_redirect_uri

      # Object for storing information about the OAuth token
      @o_auth_token = if o_auth_token.is_a? OAuthToken
                        OAuthToken.from_hash o_auth_token.to_hash
                      else
                        o_auth_token
                      end

      # List of scopes that apply to the OAuth token
      @o_auth_scopes = o_auth_scopes

      # Initializing OAuth 2 Authorization Code Grant credentials with the provided auth parameters
      @authorization_code_auth_credentials = create_auth_credentials_object(
        o_auth_client_id, o_auth_client_secret, o_auth_redirect_uri,
        o_auth_token, o_auth_scopes, authorization_code_auth_credentials
      )

      # The Http Client to use for making requests.
      set_http_client CoreLibrary::FaradayClient.new(self)
    end

    def clone_with(connection: nil, adapter: nil, timeout: nil,
                   max_retries: nil, retry_interval: nil, backoff_factor: nil,
                   retry_statuses: nil, retry_methods: nil, http_callback: nil,
                   environment: nil, o_auth_client_id: nil,
                   o_auth_client_secret: nil, o_auth_redirect_uri: nil,
                   o_auth_token: nil, o_auth_scopes: nil,
                   authorization_code_auth_credentials: nil)
      connection ||= self.connection
      adapter ||= self.adapter
      timeout ||= self.timeout
      max_retries ||= self.max_retries
      retry_interval ||= self.retry_interval
      backoff_factor ||= self.backoff_factor
      retry_statuses ||= self.retry_statuses
      retry_methods ||= self.retry_methods
      http_callback ||= self.http_callback
      environment ||= self.environment
      authorization_code_auth_credentials = create_auth_credentials_object(
        o_auth_client_id, o_auth_client_secret, o_auth_redirect_uri,
        o_auth_token, o_auth_scopes,
        authorization_code_auth_credentials || self.authorization_code_auth_credentials
      )

      Configuration.new(
        connection: connection, adapter: adapter, timeout: timeout,
        max_retries: max_retries, retry_interval: retry_interval,
        backoff_factor: backoff_factor, retry_statuses: retry_statuses,
        retry_methods: retry_methods, http_callback: http_callback,
        environment: environment,
        authorization_code_auth_credentials: authorization_code_auth_credentials
      )
    end

    def create_auth_credentials_object(o_auth_client_id, o_auth_client_secret,
                                       o_auth_redirect_uri, o_auth_token,
                                       o_auth_scopes,
                                       authorization_code_auth_credentials)
      return authorization_code_auth_credentials if o_auth_client_id.nil? &&
                                                    o_auth_client_secret.nil? &&
                                                    o_auth_redirect_uri.nil? &&
                                                    o_auth_token.nil? &&
                                                    o_auth_scopes.nil?

      warn('The \'o_auth_client_id\', \'o_auth_client_secret\', \'o_auth_redir'\
           'ect_uri\', \'o_auth_token\', \'o_auth_scopes\' params are deprecat'\
           'ed. Use \'authorization_code_auth_credentials\' param instead.')

      unless authorization_code_auth_credentials.nil?
        return authorization_code_auth_credentials.clone_with(
          o_auth_client_id: o_auth_client_id,
          o_auth_client_secret: o_auth_client_secret,
          o_auth_redirect_uri: o_auth_redirect_uri,
          o_auth_token: o_auth_token,
          o_auth_scopes: o_auth_scopes
        )
      end

      AuthorizationCodeAuthCredentials.new(
        o_auth_client_id: o_auth_client_id,
        o_auth_client_secret: o_auth_client_secret,
        o_auth_redirect_uri: o_auth_redirect_uri, o_auth_token: o_auth_token,
        o_auth_scopes: o_auth_scopes
      )
    end

    # All the environments the SDK can run in.
    ENVIRONMENTS = {
      Environment::PRODUCTION => {
        Server::DEFAULT => 'https://api.spotify.com/v1',
        Server::AUTH_SERVER => 'https://accounts.spotify.com'
      }
    }.freeze

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] server The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::DEFAULT)
      ENVIRONMENTS[environment][server].clone
    end
  end
end
