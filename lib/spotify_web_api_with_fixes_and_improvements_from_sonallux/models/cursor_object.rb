# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # CursorObject Model.
  class CursorObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The cursor to use as key to find the next page of items.
    # @return [String]
    attr_accessor :after

    # The cursor to use as key to find the previous page of items.
    # @return [String]
    attr_accessor :before

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['after'] = 'after'
      @_hash['before'] = 'before'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        after
        before
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(after = SKIP, before = SKIP)
      @after = after unless after == SKIP
      @before = before unless before == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      after = hash.key?('after') ? hash['after'] : SKIP
      before = hash.key?('before') ? hash['before'] : SKIP

      # Create object from extracted values.
      CursorObject.new(after,
                       before)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} after: #{@after}, before: #{@before}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} after: #{@after.inspect}, before: #{@before.inspect}>"
    end
  end
end
