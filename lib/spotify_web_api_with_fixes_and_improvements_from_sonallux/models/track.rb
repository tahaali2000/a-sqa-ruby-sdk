# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # Track Model.
  class Track < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The exact number of audio samples analyzed from this track. See also
    # `analysis_sample_rate`.
    # @return [Integer]
    attr_accessor :num_samples

    # Length of the track in seconds.
    # @return [Float]
    attr_accessor :duration

    # This field will always contain the empty string.
    # @return [String]
    attr_accessor :sample_md5

    # An offset to the start of the region of the track that was analyzed. (As
    # the entire track is analyzed, this should always be 0.)
    # @return [Integer]
    attr_accessor :offset_seconds

    # The length of the region of the track was analyzed, if a subset of the
    # track was analyzed. (As the entire track is analyzed, this should always
    # be 0.)
    # @return [Integer]
    attr_accessor :window_seconds

    # The sample rate used to decode and analyze this track. May differ from the
    # actual sample rate of this track available on Spotify.
    # @return [Integer]
    attr_accessor :analysis_sample_rate

    # The number of channels used for analysis. If 1, all channels are summed
    # together to mono before analysis.
    # @return [Integer]
    attr_accessor :analysis_channels

    # The time, in seconds, at which the track's fade-in period ends. If the
    # track has no fade-in, this will be 0.0.
    # @return [Float]
    attr_accessor :end_of_fade_in

    # The time, in seconds, at which the track's fade-out period starts. If the
    # track has no fade-out, this should match the track's length.
    # @return [Float]
    attr_accessor :start_of_fade_out

    # The overall loudness of a track in decibels (dB). Loudness values are
    # averaged across the entire track and are useful for comparing relative
    # loudness of tracks. Loudness is the quality of a sound that is the primary
    # psychological correlate of physical strength (amplitude). Values typically
    # range between -60 and 0 db.
    # @return [Float]
    attr_accessor :loudness

    # The overall estimated tempo of a track in beats per minute (BPM). In
    # musical terminology, tempo is the speed or pace of a given piece and
    # derives directly from the average beat duration.
    # @return [Float]
    attr_accessor :tempo

    # The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
    # @return [Float]
    attr_accessor :tempo_confidence

    # An estimated time signature. The time signature (meter) is a notational
    # convention to specify how many beats are in each bar (or measure). The
    # time signature ranges from 3 to 7 indicating time signatures of "3/4", to
    # "7/4".
    # @return [Integer]
    attr_accessor :time_signature

    # The confidence, from 0.0 to 1.0, of the reliability of the
    # `time_signature`.
    # @return [Float]
    attr_accessor :time_signature_confidence

    # The key the track is in. Integers map to pitches using standard [Pitch
    # Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1
    # = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
    # @return [Integer]
    attr_accessor :key

    # The confidence, from 0.0 to 1.0, of the reliability of the `key`.
    # @return [Float]
    attr_accessor :key_confidence

    # Mode indicates the modality (major or minor) of a track, the type of scale
    # from which its melodic content is derived. Major is represented by 1 and
    # minor is 0.
    # @return [Integer]
    attr_accessor :mode

    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    # @return [Float]
    attr_accessor :mode_confidence

    # An [Echo Nest Musical Fingerprint
    # (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4)
    # codestring for this track.
    # @return [String]
    attr_accessor :codestring

    # A version number for the Echo Nest Musical Fingerprint format used in the
    # codestring field.
    # @return [Float]
    attr_accessor :code_version

    # An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring
    # for this track.
    # @return [String]
    attr_accessor :echoprintstring

    # A version number for the EchoPrint format used in the echoprintstring
    # field.
    # @return [Float]
    attr_accessor :echoprint_version

    # A [Synchstring](https://github.com/echonest/synchdata) for this track.
    # @return [String]
    attr_accessor :synchstring

    # A version number for the Synchstring used in the synchstring field.
    # @return [Float]
    attr_accessor :synch_version

    # A Rhythmstring for this track. The format of this string is similar to the
    # Synchstring.
    # @return [String]
    attr_accessor :rhythmstring

    # A version number for the Rhythmstring used in the rhythmstring field.
    # @return [Float]
    attr_accessor :rhythm_version

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['num_samples'] = 'num_samples'
      @_hash['duration'] = 'duration'
      @_hash['sample_md5'] = 'sample_md5'
      @_hash['offset_seconds'] = 'offset_seconds'
      @_hash['window_seconds'] = 'window_seconds'
      @_hash['analysis_sample_rate'] = 'analysis_sample_rate'
      @_hash['analysis_channels'] = 'analysis_channels'
      @_hash['end_of_fade_in'] = 'end_of_fade_in'
      @_hash['start_of_fade_out'] = 'start_of_fade_out'
      @_hash['loudness'] = 'loudness'
      @_hash['tempo'] = 'tempo'
      @_hash['tempo_confidence'] = 'tempo_confidence'
      @_hash['time_signature'] = 'time_signature'
      @_hash['time_signature_confidence'] = 'time_signature_confidence'
      @_hash['key'] = 'key'
      @_hash['key_confidence'] = 'key_confidence'
      @_hash['mode'] = 'mode'
      @_hash['mode_confidence'] = 'mode_confidence'
      @_hash['codestring'] = 'codestring'
      @_hash['code_version'] = 'code_version'
      @_hash['echoprintstring'] = 'echoprintstring'
      @_hash['echoprint_version'] = 'echoprint_version'
      @_hash['synchstring'] = 'synchstring'
      @_hash['synch_version'] = 'synch_version'
      @_hash['rhythmstring'] = 'rhythmstring'
      @_hash['rhythm_version'] = 'rhythm_version'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        num_samples
        duration
        sample_md5
        offset_seconds
        window_seconds
        analysis_sample_rate
        analysis_channels
        end_of_fade_in
        start_of_fade_out
        loudness
        tempo
        tempo_confidence
        time_signature
        time_signature_confidence
        key
        key_confidence
        mode
        mode_confidence
        codestring
        code_version
        echoprintstring
        echoprint_version
        synchstring
        synch_version
        rhythmstring
        rhythm_version
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(num_samples = SKIP, duration = SKIP, sample_md5 = SKIP,
                   offset_seconds = SKIP, window_seconds = SKIP,
                   analysis_sample_rate = SKIP, analysis_channels = SKIP,
                   end_of_fade_in = SKIP, start_of_fade_out = SKIP,
                   loudness = SKIP, tempo = SKIP, tempo_confidence = SKIP,
                   time_signature = SKIP, time_signature_confidence = SKIP,
                   key = SKIP, key_confidence = SKIP, mode = SKIP,
                   mode_confidence = SKIP, codestring = SKIP,
                   code_version = SKIP, echoprintstring = SKIP,
                   echoprint_version = SKIP, synchstring = SKIP,
                   synch_version = SKIP, rhythmstring = SKIP,
                   rhythm_version = SKIP)
      @num_samples = num_samples unless num_samples == SKIP
      @duration = duration unless duration == SKIP
      @sample_md5 = sample_md5 unless sample_md5 == SKIP
      @offset_seconds = offset_seconds unless offset_seconds == SKIP
      @window_seconds = window_seconds unless window_seconds == SKIP
      @analysis_sample_rate = analysis_sample_rate unless analysis_sample_rate == SKIP
      @analysis_channels = analysis_channels unless analysis_channels == SKIP
      @end_of_fade_in = end_of_fade_in unless end_of_fade_in == SKIP
      @start_of_fade_out = start_of_fade_out unless start_of_fade_out == SKIP
      @loudness = loudness unless loudness == SKIP
      @tempo = tempo unless tempo == SKIP
      @tempo_confidence = tempo_confidence unless tempo_confidence == SKIP
      @time_signature = time_signature unless time_signature == SKIP
      unless time_signature_confidence == SKIP
        @time_signature_confidence =
          time_signature_confidence
      end
      @key = key unless key == SKIP
      @key_confidence = key_confidence unless key_confidence == SKIP
      @mode = mode unless mode == SKIP
      @mode_confidence = mode_confidence unless mode_confidence == SKIP
      @codestring = codestring unless codestring == SKIP
      @code_version = code_version unless code_version == SKIP
      @echoprintstring = echoprintstring unless echoprintstring == SKIP
      @echoprint_version = echoprint_version unless echoprint_version == SKIP
      @synchstring = synchstring unless synchstring == SKIP
      @synch_version = synch_version unless synch_version == SKIP
      @rhythmstring = rhythmstring unless rhythmstring == SKIP
      @rhythm_version = rhythm_version unless rhythm_version == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      num_samples = hash.key?('num_samples') ? hash['num_samples'] : SKIP
      duration = hash.key?('duration') ? hash['duration'] : SKIP
      sample_md5 = hash.key?('sample_md5') ? hash['sample_md5'] : SKIP
      offset_seconds =
        hash.key?('offset_seconds') ? hash['offset_seconds'] : SKIP
      window_seconds =
        hash.key?('window_seconds') ? hash['window_seconds'] : SKIP
      analysis_sample_rate =
        hash.key?('analysis_sample_rate') ? hash['analysis_sample_rate'] : SKIP
      analysis_channels =
        hash.key?('analysis_channels') ? hash['analysis_channels'] : SKIP
      end_of_fade_in =
        hash.key?('end_of_fade_in') ? hash['end_of_fade_in'] : SKIP
      start_of_fade_out =
        hash.key?('start_of_fade_out') ? hash['start_of_fade_out'] : SKIP
      loudness = hash.key?('loudness') ? hash['loudness'] : SKIP
      tempo = hash.key?('tempo') ? hash['tempo'] : SKIP
      tempo_confidence =
        hash.key?('tempo_confidence') ? hash['tempo_confidence'] : SKIP
      time_signature =
        hash.key?('time_signature') ? hash['time_signature'] : SKIP
      time_signature_confidence =
        hash.key?('time_signature_confidence') ? hash['time_signature_confidence'] : SKIP
      key = hash.key?('key') ? hash['key'] : SKIP
      key_confidence =
        hash.key?('key_confidence') ? hash['key_confidence'] : SKIP
      mode = hash.key?('mode') ? hash['mode'] : SKIP
      mode_confidence =
        hash.key?('mode_confidence') ? hash['mode_confidence'] : SKIP
      codestring = hash.key?('codestring') ? hash['codestring'] : SKIP
      code_version = hash.key?('code_version') ? hash['code_version'] : SKIP
      echoprintstring =
        hash.key?('echoprintstring') ? hash['echoprintstring'] : SKIP
      echoprint_version =
        hash.key?('echoprint_version') ? hash['echoprint_version'] : SKIP
      synchstring = hash.key?('synchstring') ? hash['synchstring'] : SKIP
      synch_version = hash.key?('synch_version') ? hash['synch_version'] : SKIP
      rhythmstring = hash.key?('rhythmstring') ? hash['rhythmstring'] : SKIP
      rhythm_version =
        hash.key?('rhythm_version') ? hash['rhythm_version'] : SKIP

      # Create object from extracted values.
      Track.new(num_samples,
                duration,
                sample_md5,
                offset_seconds,
                window_seconds,
                analysis_sample_rate,
                analysis_channels,
                end_of_fade_in,
                start_of_fade_out,
                loudness,
                tempo,
                tempo_confidence,
                time_signature,
                time_signature_confidence,
                key,
                key_confidence,
                mode,
                mode_confidence,
                codestring,
                code_version,
                echoprintstring,
                echoprint_version,
                synchstring,
                synch_version,
                rhythmstring,
                rhythm_version)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} num_samples: #{@num_samples}, duration: #{@duration}, sample_md5:"\
      " #{@sample_md5}, offset_seconds: #{@offset_seconds}, window_seconds: #{@window_seconds},"\
      " analysis_sample_rate: #{@analysis_sample_rate}, analysis_channels: #{@analysis_channels},"\
      " end_of_fade_in: #{@end_of_fade_in}, start_of_fade_out: #{@start_of_fade_out}, loudness:"\
      " #{@loudness}, tempo: #{@tempo}, tempo_confidence: #{@tempo_confidence}, time_signature:"\
      " #{@time_signature}, time_signature_confidence: #{@time_signature_confidence}, key:"\
      " #{@key}, key_confidence: #{@key_confidence}, mode: #{@mode}, mode_confidence:"\
      " #{@mode_confidence}, codestring: #{@codestring}, code_version: #{@code_version},"\
      " echoprintstring: #{@echoprintstring}, echoprint_version: #{@echoprint_version},"\
      " synchstring: #{@synchstring}, synch_version: #{@synch_version}, rhythmstring:"\
      " #{@rhythmstring}, rhythm_version: #{@rhythm_version}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} num_samples: #{@num_samples.inspect}, duration: #{@duration.inspect},"\
      " sample_md5: #{@sample_md5.inspect}, offset_seconds: #{@offset_seconds.inspect},"\
      " window_seconds: #{@window_seconds.inspect}, analysis_sample_rate:"\
      " #{@analysis_sample_rate.inspect}, analysis_channels: #{@analysis_channels.inspect},"\
      " end_of_fade_in: #{@end_of_fade_in.inspect}, start_of_fade_out:"\
      " #{@start_of_fade_out.inspect}, loudness: #{@loudness.inspect}, tempo: #{@tempo.inspect},"\
      " tempo_confidence: #{@tempo_confidence.inspect}, time_signature:"\
      " #{@time_signature.inspect}, time_signature_confidence:"\
      " #{@time_signature_confidence.inspect}, key: #{@key.inspect}, key_confidence:"\
      " #{@key_confidence.inspect}, mode: #{@mode.inspect}, mode_confidence:"\
      " #{@mode_confidence.inspect}, codestring: #{@codestring.inspect}, code_version:"\
      " #{@code_version.inspect}, echoprintstring: #{@echoprintstring.inspect}, echoprint_version:"\
      " #{@echoprint_version.inspect}, synchstring: #{@synchstring.inspect}, synch_version:"\
      " #{@synch_version.inspect}, rhythmstring: #{@rhythmstring.inspect}, rhythm_version:"\
      " #{@rhythm_version.inspect}>"
    end
  end
end
