# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # RecommendationsObject Model.
  class RecommendationsObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # An array of recommendation seed objects.
    # @return [Array[RecommendationSeedObject]]
    attr_accessor :seeds

    # An array of track objects ordered according to the parameters supplied.
    # @return [Array[TrackObject]]
    attr_accessor :tracks

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['seeds'] = 'seeds'
      @_hash['tracks'] = 'tracks'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(seeds = nil, tracks = nil)
      @seeds = seeds
      @tracks = tracks
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      seeds = nil
      unless hash['seeds'].nil?
        seeds = []
        hash['seeds'].each do |structure|
          seeds << (RecommendationSeedObject.from_hash(structure) if structure)
        end
      end

      seeds = nil unless hash.key?('seeds')
      # Parameter is an array, so we need to iterate through it
      tracks = nil
      unless hash['tracks'].nil?
        tracks = []
        hash['tracks'].each do |structure|
          tracks << (TrackObject.from_hash(structure) if structure)
        end
      end

      tracks = nil unless hash.key?('tracks')

      # Create object from extracted values.
      RecommendationsObject.new(seeds,
                                tracks)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} seeds: #{@seeds}, tracks: #{@tracks}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} seeds: #{@seeds.inspect}, tracks: #{@tracks.inspect}>"
    end
  end
end
