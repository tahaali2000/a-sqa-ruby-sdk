# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # QueueObject Model.
  class QueueObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The currently playing track or episode. Can be `null`.
    # @return [Object]
    attr_accessor :currently_playing

    # The tracks or episodes in the queue. Can be empty.
    # @return [Array[Object]]
    attr_accessor :queue

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['currently_playing'] = 'currently_playing'
      @_hash['queue'] = 'queue'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        currently_playing
        queue
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(currently_playing = SKIP, queue = SKIP)
      @currently_playing = currently_playing unless currently_playing == SKIP
      @queue = queue unless queue == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      currently_playing = hash.key?('currently_playing') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:QueueObjectCurrentlyPlaying), hash['currently_playing']
      ) : SKIP
      queue = hash.key?('queue') ? APIHelper.deserialize_union_type(
        UnionTypeLookUp.get(:QueueObjectQueue), hash['queue']
      ) : SKIP

      # Create object from extracted values.
      QueueObject.new(currently_playing,
                      queue)
    end

    # Validates an instance of the object from a given value.
    # @param [QueueObject | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} currently_playing: #{@currently_playing}, queue: #{@queue}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} currently_playing: #{@currently_playing.inspect}, queue:"\
      " #{@queue.inspect}>"
    end
  end
end
