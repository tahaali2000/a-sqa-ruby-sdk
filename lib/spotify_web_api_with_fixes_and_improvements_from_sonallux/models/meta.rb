# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # Meta Model.
  class Meta < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The version of the Analyzer used to analyze this track.
    # @return [String]
    attr_accessor :analyzer_version

    # The platform used to read the track's audio data.
    # @return [String]
    attr_accessor :platform

    # A detailed status code for this track. If analysis data is missing, this
    # code may explain why.
    # @return [String]
    attr_accessor :detailed_status

    # The return code of the analyzer process. 0 if successful, 1 if any errors
    # occurred.
    # @return [Integer]
    attr_accessor :status_code

    # The Unix timestamp (in seconds) at which this track was analyzed.
    # @return [Integer]
    attr_accessor :timestamp

    # The amount of time taken to analyze this track.
    # @return [Float]
    attr_accessor :analysis_time

    # The method used to read the track's audio data.
    # @return [String]
    attr_accessor :input_process

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['analyzer_version'] = 'analyzer_version'
      @_hash['platform'] = 'platform'
      @_hash['detailed_status'] = 'detailed_status'
      @_hash['status_code'] = 'status_code'
      @_hash['timestamp'] = 'timestamp'
      @_hash['analysis_time'] = 'analysis_time'
      @_hash['input_process'] = 'input_process'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        analyzer_version
        platform
        detailed_status
        status_code
        timestamp
        analysis_time
        input_process
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(analyzer_version = SKIP, platform = SKIP,
                   detailed_status = SKIP, status_code = SKIP, timestamp = SKIP,
                   analysis_time = SKIP, input_process = SKIP)
      @analyzer_version = analyzer_version unless analyzer_version == SKIP
      @platform = platform unless platform == SKIP
      @detailed_status = detailed_status unless detailed_status == SKIP
      @status_code = status_code unless status_code == SKIP
      @timestamp = timestamp unless timestamp == SKIP
      @analysis_time = analysis_time unless analysis_time == SKIP
      @input_process = input_process unless input_process == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      analyzer_version =
        hash.key?('analyzer_version') ? hash['analyzer_version'] : SKIP
      platform = hash.key?('platform') ? hash['platform'] : SKIP
      detailed_status =
        hash.key?('detailed_status') ? hash['detailed_status'] : SKIP
      status_code = hash.key?('status_code') ? hash['status_code'] : SKIP
      timestamp = hash.key?('timestamp') ? hash['timestamp'] : SKIP
      analysis_time = hash.key?('analysis_time') ? hash['analysis_time'] : SKIP
      input_process = hash.key?('input_process') ? hash['input_process'] : SKIP

      # Create object from extracted values.
      Meta.new(analyzer_version,
               platform,
               detailed_status,
               status_code,
               timestamp,
               analysis_time,
               input_process)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} analyzer_version: #{@analyzer_version}, platform: #{@platform},"\
      " detailed_status: #{@detailed_status}, status_code: #{@status_code}, timestamp:"\
      " #{@timestamp}, analysis_time: #{@analysis_time}, input_process: #{@input_process}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} analyzer_version: #{@analyzer_version.inspect}, platform:"\
      " #{@platform.inspect}, detailed_status: #{@detailed_status.inspect}, status_code:"\
      " #{@status_code.inspect}, timestamp: #{@timestamp.inspect}, analysis_time:"\
      " #{@analysis_time.inspect}, input_process: #{@input_process.inspect}>"
    end
  end
end
