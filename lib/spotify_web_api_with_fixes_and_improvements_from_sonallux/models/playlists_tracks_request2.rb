# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # PlaylistsTracksRequest2 Model.
  class PlaylistsTracksRequest2 < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # An array of objects containing [Spotify
    # URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or
    # episodes to remove.
    # For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh"
    # },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100
    # objects can be sent at once.
    # @return [Array[Track1]]
    attr_accessor :tracks

    # The playlist's snapshot ID against which you want to make the changes.
    # The API will validate that the specified items exist and in the specified
    # positions and make the changes,
    # even if more recent changes have been made to the playlist.
    # @return [String]
    attr_accessor :snapshot_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tracks'] = 'tracks'
      @_hash['snapshot_id'] = 'snapshot_id'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        snapshot_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(tracks = nil, snapshot_id = SKIP)
      @tracks = tracks
      @snapshot_id = snapshot_id unless snapshot_id == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      tracks = nil
      unless hash['tracks'].nil?
        tracks = []
        hash['tracks'].each do |structure|
          tracks << (Track1.from_hash(structure) if structure)
        end
      end

      tracks = nil unless hash.key?('tracks')
      snapshot_id = hash.key?('snapshot_id') ? hash['snapshot_id'] : SKIP

      # Create object from extracted values.
      PlaylistsTracksRequest2.new(tracks,
                                  snapshot_id)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} tracks: #{@tracks}, snapshot_id: #{@snapshot_id}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} tracks: #{@tracks.inspect}, snapshot_id: #{@snapshot_id.inspect}>"
    end
  end
end
