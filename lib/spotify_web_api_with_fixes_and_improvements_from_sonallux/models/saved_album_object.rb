# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # SavedAlbumObject Model.
  class SavedAlbumObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The date and time the album was saved
    # Timestamps are returned in ISO 8601 format as Coordinated Universal Time
    # (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
    # If the time is imprecise (for example, the date/time of an album release),
    # an additional field indicates the precision; see for example, release_date
    # in an album object.
    # @return [DateTime]
    attr_accessor :added_at

    # Information about the album.
    # @return [AlbumObject]
    attr_accessor :album

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['added_at'] = 'added_at'
      @_hash['album'] = 'album'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        added_at
        album
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(added_at = SKIP, album = SKIP)
      @added_at = added_at unless added_at == SKIP
      @album = album unless album == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      added_at = if hash.key?('added_at')
                   (DateTimeHelper.from_rfc3339(hash['added_at']) if hash['added_at'])
                 else
                   SKIP
                 end
      album = AlbumObject.from_hash(hash['album']) if hash['album']

      # Create object from extracted values.
      SavedAlbumObject.new(added_at,
                           album)
    end

    def to_custom_added_at
      DateTimeHelper.to_rfc3339(added_at)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} added_at: #{@added_at}, album: #{@album}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} added_at: #{@added_at.inspect}, album: #{@album.inspect}>"
    end
  end
end
