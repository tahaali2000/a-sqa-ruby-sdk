# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # PublicUserObject Model.
  class PublicUserObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The name displayed on the user's profile. `null` if not available.
    # @return [String]
    attr_accessor :display_name

    # Known public external URLs for this user.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # Information about the followers of this user.
    # @return [FollowersObject]
    attr_accessor :followers

    # A link to the Web API endpoint for this user.
    # @return [String]
    attr_accessor :href

    # The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids)
    # for this user.
    # @return [String]
    attr_accessor :id

    # The user's profile image.
    # @return [Array[ImageObject]]
    attr_accessor :images

    # The object type.
    # @return [Type3Enum]
    attr_accessor :type

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # this user.
    # @return [String]
    attr_accessor :uri

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['display_name'] = 'display_name'
      @_hash['external_urls'] = 'external_urls'
      @_hash['followers'] = 'followers'
      @_hash['href'] = 'href'
      @_hash['id'] = 'id'
      @_hash['images'] = 'images'
      @_hash['type'] = 'type'
      @_hash['uri'] = 'uri'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        display_name
        external_urls
        followers
        href
        id
        images
        type
        uri
      ]
    end

    # An array for nullable fields
    def self.nullables
      %w[
        display_name
      ]
    end

    def initialize(display_name = SKIP, external_urls = SKIP, followers = SKIP,
                   href = SKIP, id = SKIP, images = SKIP, type = SKIP,
                   uri = SKIP)
      @display_name = display_name unless display_name == SKIP
      @external_urls = external_urls unless external_urls == SKIP
      @followers = followers unless followers == SKIP
      @href = href unless href == SKIP
      @id = id unless id == SKIP
      @images = images unless images == SKIP
      @type = type unless type == SKIP
      @uri = uri unless uri == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      display_name = hash.key?('display_name') ? hash['display_name'] : SKIP
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      followers = FollowersObject.from_hash(hash['followers']) if hash['followers']
      href = hash.key?('href') ? hash['href'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      images = nil
      unless hash['images'].nil?
        images = []
        hash['images'].each do |structure|
          images << (ImageObject.from_hash(structure) if structure)
        end
      end

      images = SKIP unless hash.key?('images')
      type = hash.key?('type') ? hash['type'] : SKIP
      uri = hash.key?('uri') ? hash['uri'] : SKIP

      # Create object from extracted values.
      PublicUserObject.new(display_name,
                           external_urls,
                           followers,
                           href,
                           id,
                           images,
                           type,
                           uri)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} display_name: #{@display_name}, external_urls: #{@external_urls},"\
      " followers: #{@followers}, href: #{@href}, id: #{@id}, images: #{@images}, type: #{@type},"\
      " uri: #{@uri}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} display_name: #{@display_name.inspect}, external_urls:"\
      " #{@external_urls.inspect}, followers: #{@followers.inspect}, href: #{@href.inspect}, id:"\
      " #{@id.inspect}, images: #{@images.inspect}, type: #{@type.inspect}, uri: #{@uri.inspect}>"
    end
  end
end
