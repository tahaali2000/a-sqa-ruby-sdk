# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # PrivateUserObject Model.
  class PrivateUserObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The country of the user, as set in the user's account profile. An [ISO
    # 3166-1 alpha-2 country
    # code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is
    # only available when the current user has granted access to the
    # [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes
    # ) scope._
    # @return [String]
    attr_accessor :country

    # The name displayed on the user's profile. `null` if not available.
    # @return [String]
    attr_accessor :display_name

    # The user's email address, as entered by the user when creating their
    # account. _**Important!** This email address is unverified; there is no
    # proof that it actually belongs to the user._ _This field is only available
    # when the current user has granted access to the
    # [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes)
    # scope._
    # @return [String]
    attr_accessor :email

    # The user's explicit content settings. _This field is only available when
    # the current user has granted access to the
    # [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes
    # ) scope._
    # @return [ExplicitContentSettingsObject]
    attr_accessor :explicit_content

    # Known external URLs for this user.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # Information about the followers of the user.
    # @return [FollowersObject]
    attr_accessor :followers

    # A link to the Web API endpoint for this user.
    # @return [String]
    attr_accessor :href

    # The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids)
    # for the user.
    # @return [String]
    attr_accessor :id

    # The user's profile image.
    # @return [Array[ImageObject]]
    attr_accessor :images

    # The user's Spotify subscription level: "premium", "free", etc. (The
    # subscription level "open" can be considered the same as "free".) _This
    # field is only available when the current user has granted access to the
    # [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes
    # ) scope._
    # @return [String]
    attr_accessor :product

    # The object type: "user"
    # @return [String]
    attr_accessor :type

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # the user.
    # @return [String]
    attr_accessor :uri

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['country'] = 'country'
      @_hash['display_name'] = 'display_name'
      @_hash['email'] = 'email'
      @_hash['explicit_content'] = 'explicit_content'
      @_hash['external_urls'] = 'external_urls'
      @_hash['followers'] = 'followers'
      @_hash['href'] = 'href'
      @_hash['id'] = 'id'
      @_hash['images'] = 'images'
      @_hash['product'] = 'product'
      @_hash['type'] = 'type'
      @_hash['uri'] = 'uri'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        country
        display_name
        email
        explicit_content
        external_urls
        followers
        href
        id
        images
        product
        type
        uri
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(country = SKIP, display_name = SKIP, email = SKIP,
                   explicit_content = SKIP, external_urls = SKIP,
                   followers = SKIP, href = SKIP, id = SKIP, images = SKIP,
                   product = SKIP, type = SKIP, uri = SKIP)
      @country = country unless country == SKIP
      @display_name = display_name unless display_name == SKIP
      @email = email unless email == SKIP
      @explicit_content = explicit_content unless explicit_content == SKIP
      @external_urls = external_urls unless external_urls == SKIP
      @followers = followers unless followers == SKIP
      @href = href unless href == SKIP
      @id = id unless id == SKIP
      @images = images unless images == SKIP
      @product = product unless product == SKIP
      @type = type unless type == SKIP
      @uri = uri unless uri == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      country = hash.key?('country') ? hash['country'] : SKIP
      display_name = hash.key?('display_name') ? hash['display_name'] : SKIP
      email = hash.key?('email') ? hash['email'] : SKIP
      explicit_content = ExplicitContentSettingsObject.from_hash(hash['explicit_content']) if
        hash['explicit_content']
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      followers = FollowersObject.from_hash(hash['followers']) if hash['followers']
      href = hash.key?('href') ? hash['href'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      images = nil
      unless hash['images'].nil?
        images = []
        hash['images'].each do |structure|
          images << (ImageObject.from_hash(structure) if structure)
        end
      end

      images = SKIP unless hash.key?('images')
      product = hash.key?('product') ? hash['product'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      uri = hash.key?('uri') ? hash['uri'] : SKIP

      # Create object from extracted values.
      PrivateUserObject.new(country,
                            display_name,
                            email,
                            explicit_content,
                            external_urls,
                            followers,
                            href,
                            id,
                            images,
                            product,
                            type,
                            uri)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} country: #{@country}, display_name: #{@display_name}, email: #{@email},"\
      " explicit_content: #{@explicit_content}, external_urls: #{@external_urls}, followers:"\
      " #{@followers}, href: #{@href}, id: #{@id}, images: #{@images}, product: #{@product}, type:"\
      " #{@type}, uri: #{@uri}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} country: #{@country.inspect}, display_name: #{@display_name.inspect},"\
      " email: #{@email.inspect}, explicit_content: #{@explicit_content.inspect}, external_urls:"\
      " #{@external_urls.inspect}, followers: #{@followers.inspect}, href: #{@href.inspect}, id:"\
      " #{@id.inspect}, images: #{@images.inspect}, product: #{@product.inspect}, type:"\
      " #{@type.inspect}, uri: #{@uri.inspect}>"
    end
  end
end
