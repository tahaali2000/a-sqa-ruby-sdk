# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # ResumePointObject Model.
  class ResumePointObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Whether or not the episode has been fully played by the user.
    # @return [TrueClass | FalseClass]
    attr_accessor :fully_played

    # The user's most recent position in the episode in milliseconds.
    # @return [Integer]
    attr_accessor :resume_position_ms

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['fully_played'] = 'fully_played'
      @_hash['resume_position_ms'] = 'resume_position_ms'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        fully_played
        resume_position_ms
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(fully_played = SKIP, resume_position_ms = SKIP)
      @fully_played = fully_played unless fully_played == SKIP
      @resume_position_ms = resume_position_ms unless resume_position_ms == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      fully_played = hash.key?('fully_played') ? hash['fully_played'] : SKIP
      resume_position_ms =
        hash.key?('resume_position_ms') ? hash['resume_position_ms'] : SKIP

      # Create object from extracted values.
      ResumePointObject.new(fully_played,
                            resume_position_ms)
    end

    # Validates an instance of the object from a given value.
    # @param [ResumePointObject | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} fully_played: #{@fully_played}, resume_position_ms:"\
      " #{@resume_position_ms}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} fully_played: #{@fully_played.inspect}, resume_position_ms:"\
      " #{@resume_position_ms.inspect}>"
    end
  end
end
