# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # ErrorObject Model.
  class ErrorObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The HTTP status code (also returned in the response header; see [Response
    # Status
    # Codes](/documentation/web-api/concepts/api-calls#response-status-codes)
    # for more information).
    # @return [Integer]
    attr_accessor :status

    # A short description of the cause of the error.
    # @return [String]
    attr_accessor :message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['status'] = 'status'
      @_hash['message'] = 'message'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(status = nil, message = nil)
      @status = status
      @message = message
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      status = hash.key?('status') ? hash['status'] : nil
      message = hash.key?('message') ? hash['message'] : nil

      # Create object from extracted values.
      ErrorObject.new(status,
                      message)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status}, message: #{@message}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} status: #{@status.inspect}, message: #{@message.inspect}>"
    end
  end
end
