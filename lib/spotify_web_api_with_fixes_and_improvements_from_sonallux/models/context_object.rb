# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # ContextObject Model.
  class ContextObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The object type, e.g. "artist", "playlist", "album", "show".
    # @return [String]
    attr_accessor :type

    # A link to the Web API endpoint providing full details of the track.
    # @return [String]
    attr_accessor :href

    # External URLs for this context.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # the context.
    # @return [String]
    attr_accessor :uri

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['type'] = 'type'
      @_hash['href'] = 'href'
      @_hash['external_urls'] = 'external_urls'
      @_hash['uri'] = 'uri'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        type
        href
        external_urls
        uri
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(type = SKIP, href = SKIP, external_urls = SKIP, uri = SKIP)
      @type = type unless type == SKIP
      @href = href unless href == SKIP
      @external_urls = external_urls unless external_urls == SKIP
      @uri = uri unless uri == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      type = hash.key?('type') ? hash['type'] : SKIP
      href = hash.key?('href') ? hash['href'] : SKIP
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      uri = hash.key?('uri') ? hash['uri'] : SKIP

      # Create object from extracted values.
      ContextObject.new(type,
                        href,
                        external_urls,
                        uri)
    end

    # Validates an instance of the object from a given value.
    # @param [ContextObject | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} type: #{@type}, href: #{@href}, external_urls: #{@external_urls}, uri:"\
      " #{@uri}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} type: #{@type.inspect}, href: #{@href.inspect}, external_urls:"\
      " #{@external_urls.inspect}, uri: #{@uri.inspect}>"
    end
  end
end
