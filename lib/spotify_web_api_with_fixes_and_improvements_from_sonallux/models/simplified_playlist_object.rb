# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # SimplifiedPlaylistObject Model.
  class SimplifiedPlaylistObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # `true` if the owner allows other users to modify the playlist.
    # @return [TrueClass | FalseClass]
    attr_accessor :collaborative

    # The playlist description. _Only returned for modified, verified playlists,
    # otherwise_ `null`.
    # @return [String]
    attr_accessor :description

    # Known external URLs for this playlist.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # A link to the Web API endpoint providing full details of the playlist.
    # @return [String]
    attr_accessor :href

    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the
    # playlist.
    # @return [String]
    attr_accessor :id

    # Images for the playlist. The array may be empty or contain up to three
    # images. The images are returned by size in descending order. See [Working
    # with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If
    # returned, the source URL for the image (`url`) is temporary and will
    # expire in less than a day._
    # @return [Array[ImageObject]]
    attr_accessor :images

    # The name of the playlist.
    # @return [String]
    attr_accessor :name

    # The user who owns the playlist
    # @return [PlaylistOwnerObject]
    attr_accessor :owner

    # The playlist's public/private status: `true` the playlist is public,
    # `false` the playlist is private, `null` the playlist status is not
    # relevant. For more about public/private status, see [Working with
    # Playlists](/documentation/web-api/concepts/playlists)
    # @return [TrueClass | FalseClass]
    attr_accessor :public

    # The version identifier for the current playlist. Can be supplied in other
    # requests to target a specific playlist version
    # @return [String]
    attr_accessor :snapshot_id

    # A collection containing a link ( `href` ) to the Web API endpoint where
    # full details of the playlist's tracks can be retrieved, along with the
    # `total` number of tracks in the playlist. Note, a track object may be
    # `null`. This can happen if a track is no longer available.
    # @return [PlaylistTracksRefObject]
    attr_accessor :tracks

    # The object type: "playlist"
    # @return [String]
    attr_accessor :type

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # the playlist.
    # @return [String]
    attr_accessor :uri

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['collaborative'] = 'collaborative'
      @_hash['description'] = 'description'
      @_hash['external_urls'] = 'external_urls'
      @_hash['href'] = 'href'
      @_hash['id'] = 'id'
      @_hash['images'] = 'images'
      @_hash['name'] = 'name'
      @_hash['owner'] = 'owner'
      @_hash['public'] = 'public'
      @_hash['snapshot_id'] = 'snapshot_id'
      @_hash['tracks'] = 'tracks'
      @_hash['type'] = 'type'
      @_hash['uri'] = 'uri'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        collaborative
        description
        external_urls
        href
        id
        images
        name
        owner
        public
        snapshot_id
        tracks
        type
        uri
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(collaborative = SKIP, description = SKIP,
                   external_urls = SKIP, href = SKIP, id = SKIP, images = SKIP,
                   name = SKIP, owner = SKIP, public = SKIP, snapshot_id = SKIP,
                   tracks = SKIP, type = SKIP, uri = SKIP)
      @collaborative = collaborative unless collaborative == SKIP
      @description = description unless description == SKIP
      @external_urls = external_urls unless external_urls == SKIP
      @href = href unless href == SKIP
      @id = id unless id == SKIP
      @images = images unless images == SKIP
      @name = name unless name == SKIP
      @owner = owner unless owner == SKIP
      @public = public unless public == SKIP
      @snapshot_id = snapshot_id unless snapshot_id == SKIP
      @tracks = tracks unless tracks == SKIP
      @type = type unless type == SKIP
      @uri = uri unless uri == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      collaborative = hash.key?('collaborative') ? hash['collaborative'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      href = hash.key?('href') ? hash['href'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      images = nil
      unless hash['images'].nil?
        images = []
        hash['images'].each do |structure|
          images << (ImageObject.from_hash(structure) if structure)
        end
      end

      images = SKIP unless hash.key?('images')
      name = hash.key?('name') ? hash['name'] : SKIP
      owner = PlaylistOwnerObject.from_hash(hash['owner']) if hash['owner']
      public = hash.key?('public') ? hash['public'] : SKIP
      snapshot_id = hash.key?('snapshot_id') ? hash['snapshot_id'] : SKIP
      tracks = PlaylistTracksRefObject.from_hash(hash['tracks']) if hash['tracks']
      type = hash.key?('type') ? hash['type'] : SKIP
      uri = hash.key?('uri') ? hash['uri'] : SKIP

      # Create object from extracted values.
      SimplifiedPlaylistObject.new(collaborative,
                                   description,
                                   external_urls,
                                   href,
                                   id,
                                   images,
                                   name,
                                   owner,
                                   public,
                                   snapshot_id,
                                   tracks,
                                   type,
                                   uri)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} collaborative: #{@collaborative}, description: #{@description},"\
      " external_urls: #{@external_urls}, href: #{@href}, id: #{@id}, images: #{@images}, name:"\
      " #{@name}, owner: #{@owner}, public: #{@public}, snapshot_id: #{@snapshot_id}, tracks:"\
      " #{@tracks}, type: #{@type}, uri: #{@uri}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} collaborative: #{@collaborative.inspect}, description:"\
      " #{@description.inspect}, external_urls: #{@external_urls.inspect}, href: #{@href.inspect},"\
      " id: #{@id.inspect}, images: #{@images.inspect}, name: #{@name.inspect}, owner:"\
      " #{@owner.inspect}, public: #{@public.inspect}, snapshot_id: #{@snapshot_id.inspect},"\
      " tracks: #{@tracks.inspect}, type: #{@type.inspect}, uri: #{@uri.inspect}>"
    end
  end
end
