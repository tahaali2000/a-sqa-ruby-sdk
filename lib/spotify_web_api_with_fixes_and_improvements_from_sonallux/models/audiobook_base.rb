# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # AudiobookBase Model.
  class AudiobookBase < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The author(s) for the audiobook.
    # @return [Array[AuthorObject]]
    attr_accessor :authors

    # A list of the countries in which the audiobook can be played, identified
    # by their [ISO 3166-1
    # alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    # @return [Array[String]]
    attr_accessor :available_markets

    # The copyright statements of the audiobook.
    # @return [Array[CopyrightObject]]
    attr_accessor :copyrights

    # A description of the audiobook. HTML tags are stripped away from this
    # field, use `html_description` field in case HTML tags are needed.
    # @return [String]
    attr_accessor :description

    # A description of the audiobook. This field may contain HTML tags.
    # @return [String]
    attr_accessor :html_description

    # The edition of the audiobook.
    # @return [String]
    attr_accessor :edition

    # Whether or not the audiobook has explicit content (true = yes it does;
    # false = no it does not OR unknown).
    # @return [TrueClass | FalseClass]
    attr_accessor :explicit

    # External URLs for this audiobook.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # A link to the Web API endpoint providing full details of the audiobook.
    # @return [String]
    attr_accessor :href

    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the
    # audiobook.
    # @return [String]
    attr_accessor :id

    # The cover art for the audiobook in various sizes, widest first.
    # @return [Array[ImageObject]]
    attr_accessor :images

    # A list of the languages used in the audiobook, identified by their [ISO
    # 639](https://en.wikipedia.org/wiki/ISO_639) code.
    # @return [Array[String]]
    attr_accessor :languages

    # The media type of the audiobook.
    # @return [String]
    attr_accessor :media_type

    # The name of the audiobook.
    # @return [String]
    attr_accessor :name

    # The narrator(s) for the audiobook.
    # @return [Array[NarratorObject]]
    attr_accessor :narrators

    # The publisher of the audiobook.
    # @return [String]
    attr_accessor :publisher

    # The object type.
    # @return [String]
    attr_reader :type

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # the audiobook.
    # @return [String]
    attr_accessor :uri

    # The number of chapters in this audiobook.
    # @return [Integer]
    attr_accessor :total_chapters

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['authors'] = 'authors'
      @_hash['available_markets'] = 'available_markets'
      @_hash['copyrights'] = 'copyrights'
      @_hash['description'] = 'description'
      @_hash['html_description'] = 'html_description'
      @_hash['edition'] = 'edition'
      @_hash['explicit'] = 'explicit'
      @_hash['external_urls'] = 'external_urls'
      @_hash['href'] = 'href'
      @_hash['id'] = 'id'
      @_hash['images'] = 'images'
      @_hash['languages'] = 'languages'
      @_hash['media_type'] = 'media_type'
      @_hash['name'] = 'name'
      @_hash['narrators'] = 'narrators'
      @_hash['publisher'] = 'publisher'
      @_hash['type'] = 'type'
      @_hash['uri'] = 'uri'
      @_hash['total_chapters'] = 'total_chapters'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        edition
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(authors = nil, available_markets = nil, copyrights = nil,
                   description = nil, html_description = nil, explicit = nil,
                   external_urls = nil, href = nil, id = nil, images = nil,
                   languages = nil, media_type = nil, name = nil,
                   narrators = nil, publisher = nil, uri = nil,
                   total_chapters = nil, edition = SKIP)
      @authors = authors
      @available_markets = available_markets
      @copyrights = copyrights
      @description = description
      @html_description = html_description
      @edition = edition unless edition == SKIP
      @explicit = explicit
      @external_urls = external_urls
      @href = href
      @id = id
      @images = images
      @languages = languages
      @media_type = media_type
      @name = name
      @narrators = narrators
      @publisher = publisher
      @type = 'audiobook'
      @uri = uri
      @total_chapters = total_chapters
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      authors = nil
      unless hash['authors'].nil?
        authors = []
        hash['authors'].each do |structure|
          authors << (AuthorObject.from_hash(structure) if structure)
        end
      end

      authors = nil unless hash.key?('authors')
      available_markets =
        hash.key?('available_markets') ? hash['available_markets'] : nil
      # Parameter is an array, so we need to iterate through it
      copyrights = nil
      unless hash['copyrights'].nil?
        copyrights = []
        hash['copyrights'].each do |structure|
          copyrights << (CopyrightObject.from_hash(structure) if structure)
        end
      end

      copyrights = nil unless hash.key?('copyrights')
      description = hash.key?('description') ? hash['description'] : nil
      html_description =
        hash.key?('html_description') ? hash['html_description'] : nil
      explicit = hash.key?('explicit') ? hash['explicit'] : nil
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      href = hash.key?('href') ? hash['href'] : nil
      id = hash.key?('id') ? hash['id'] : nil
      # Parameter is an array, so we need to iterate through it
      images = nil
      unless hash['images'].nil?
        images = []
        hash['images'].each do |structure|
          images << (ImageObject.from_hash(structure) if structure)
        end
      end

      images = nil unless hash.key?('images')
      languages = hash.key?('languages') ? hash['languages'] : nil
      media_type = hash.key?('media_type') ? hash['media_type'] : nil
      name = hash.key?('name') ? hash['name'] : nil
      # Parameter is an array, so we need to iterate through it
      narrators = nil
      unless hash['narrators'].nil?
        narrators = []
        hash['narrators'].each do |structure|
          narrators << (NarratorObject.from_hash(structure) if structure)
        end
      end

      narrators = nil unless hash.key?('narrators')
      publisher = hash.key?('publisher') ? hash['publisher'] : nil
      uri = hash.key?('uri') ? hash['uri'] : nil
      total_chapters =
        hash.key?('total_chapters') ? hash['total_chapters'] : nil
      edition = hash.key?('edition') ? hash['edition'] : SKIP

      # Create object from extracted values.
      AudiobookBase.new(authors,
                        available_markets,
                        copyrights,
                        description,
                        html_description,
                        explicit,
                        external_urls,
                        href,
                        id,
                        images,
                        languages,
                        media_type,
                        name,
                        narrators,
                        publisher,
                        uri,
                        total_chapters,
                        edition)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} authors: #{@authors}, available_markets: #{@available_markets}, copyrights:"\
      " #{@copyrights}, description: #{@description}, html_description: #{@html_description},"\
      " edition: #{@edition}, explicit: #{@explicit}, external_urls: #{@external_urls}, href:"\
      " #{@href}, id: #{@id}, images: #{@images}, languages: #{@languages}, media_type:"\
      " #{@media_type}, name: #{@name}, narrators: #{@narrators}, publisher: #{@publisher}, type:"\
      " #{@type}, uri: #{@uri}, total_chapters: #{@total_chapters}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} authors: #{@authors.inspect}, available_markets:"\
      " #{@available_markets.inspect}, copyrights: #{@copyrights.inspect}, description:"\
      " #{@description.inspect}, html_description: #{@html_description.inspect}, edition:"\
      " #{@edition.inspect}, explicit: #{@explicit.inspect}, external_urls:"\
      " #{@external_urls.inspect}, href: #{@href.inspect}, id: #{@id.inspect}, images:"\
      " #{@images.inspect}, languages: #{@languages.inspect}, media_type: #{@media_type.inspect},"\
      " name: #{@name.inspect}, narrators: #{@narrators.inspect}, publisher:"\
      " #{@publisher.inspect}, type: #{@type.inspect}, uri: #{@uri.inspect}, total_chapters:"\
      " #{@total_chapters.inspect}>"
    end
  end
end
