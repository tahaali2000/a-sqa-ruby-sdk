# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # PlayHistoryObject Model.
  class PlayHistoryObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The track the user listened to.
    # @return [TrackObject]
    attr_accessor :track

    # The date and time the track was played.
    # @return [DateTime]
    attr_accessor :played_at

    # The context the track was played from.
    # @return [ContextObject]
    attr_accessor :context

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['track'] = 'track'
      @_hash['played_at'] = 'played_at'
      @_hash['context'] = 'context'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        track
        played_at
        context
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(track = SKIP, played_at = SKIP, context = SKIP)
      @track = track unless track == SKIP
      @played_at = played_at unless played_at == SKIP
      @context = context unless context == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      track = TrackObject.from_hash(hash['track']) if hash['track']
      played_at = if hash.key?('played_at')
                    (DateTimeHelper.from_rfc3339(hash['played_at']) if hash['played_at'])
                  else
                    SKIP
                  end
      context = ContextObject.from_hash(hash['context']) if hash['context']

      # Create object from extracted values.
      PlayHistoryObject.new(track,
                            played_at,
                            context)
    end

    def to_custom_played_at
      DateTimeHelper.to_rfc3339(played_at)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} track: #{@track}, played_at: #{@played_at}, context: #{@context}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} track: #{@track.inspect}, played_at: #{@played_at.inspect}, context:"\
      " #{@context.inspect}>"
    end
  end
end
