# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # ExplicitContentSettingsObject Model.
  class ExplicitContentSettingsObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # When `true`, indicates that explicit content should not be played.
    # @return [TrueClass | FalseClass]
    attr_accessor :filter_enabled

    # When `true`, indicates that the explicit content setting is locked and
    # can't be changed by the user.
    # @return [TrueClass | FalseClass]
    attr_accessor :filter_locked

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['filter_enabled'] = 'filter_enabled'
      @_hash['filter_locked'] = 'filter_locked'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        filter_enabled
        filter_locked
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(filter_enabled = SKIP, filter_locked = SKIP)
      @filter_enabled = filter_enabled unless filter_enabled == SKIP
      @filter_locked = filter_locked unless filter_locked == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      filter_enabled =
        hash.key?('filter_enabled') ? hash['filter_enabled'] : SKIP
      filter_locked = hash.key?('filter_locked') ? hash['filter_locked'] : SKIP

      # Create object from extracted values.
      ExplicitContentSettingsObject.new(filter_enabled,
                                        filter_locked)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} filter_enabled: #{@filter_enabled}, filter_locked: #{@filter_locked}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} filter_enabled: #{@filter_enabled.inspect}, filter_locked:"\
      " #{@filter_locked.inspect}>"
    end
  end
end
