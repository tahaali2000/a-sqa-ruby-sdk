# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # SimplifiedAlbumObject Model.
  class SimplifiedAlbumObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The type of the album.
    # @return [AlbumTypeEnum]
    attr_accessor :album_type

    # The number of tracks in the album.
    # @return [Integer]
    attr_accessor :total_tracks

    # The markets in which the album is available: [ISO 3166-1 alpha-2 country
    # codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an
    # album is considered available in a market when at least 1 of its tracks is
    # available in that market._
    # @return [Array[String]]
    attr_accessor :available_markets

    # Known external URLs for this album.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # A link to the Web API endpoint providing full details of the album.
    # @return [String]
    attr_accessor :href

    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the
    # album.
    # @return [String]
    attr_accessor :id

    # The cover art for the album in various sizes, widest first.
    # @return [Array[ImageObject]]
    attr_accessor :images

    # The name of the album. In case of an album takedown, the value may be an
    # empty string.
    # @return [String]
    attr_accessor :name

    # The date the album was first released.
    # @return [String]
    attr_accessor :release_date

    # The precision with which `release_date` value is known.
    # @return [ReleaseDatePrecisionEnum]
    attr_accessor :release_date_precision

    # Included in the response when a content restriction is applied.
    # @return [AlbumRestrictionObject]
    attr_accessor :restrictions

    # The object type.
    # @return [String]
    attr_reader :type

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # the album.
    # @return [String]
    attr_accessor :uri

    # The artists of the album. Each artist object includes a link in `href` to
    # more detailed information about the artist.
    # @return [Array[SimplifiedArtistObject]]
    attr_accessor :artists

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['album_type'] = 'album_type'
      @_hash['total_tracks'] = 'total_tracks'
      @_hash['available_markets'] = 'available_markets'
      @_hash['external_urls'] = 'external_urls'
      @_hash['href'] = 'href'
      @_hash['id'] = 'id'
      @_hash['images'] = 'images'
      @_hash['name'] = 'name'
      @_hash['release_date'] = 'release_date'
      @_hash['release_date_precision'] = 'release_date_precision'
      @_hash['restrictions'] = 'restrictions'
      @_hash['type'] = 'type'
      @_hash['uri'] = 'uri'
      @_hash['artists'] = 'artists'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        restrictions
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(album_type = nil, total_tracks = nil,
                   available_markets = nil, external_urls = nil, href = nil,
                   id = nil, images = nil, name = nil, release_date = nil,
                   release_date_precision = nil, uri = nil, artists = nil,
                   restrictions = SKIP)
      @album_type = album_type
      @total_tracks = total_tracks
      @available_markets = available_markets
      @external_urls = external_urls
      @href = href
      @id = id
      @images = images
      @name = name
      @release_date = release_date
      @release_date_precision = release_date_precision
      @restrictions = restrictions unless restrictions == SKIP
      @type = 'album'
      @uri = uri
      @artists = artists
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      album_type = hash.key?('album_type') ? hash['album_type'] : nil
      total_tracks = hash.key?('total_tracks') ? hash['total_tracks'] : nil
      available_markets =
        hash.key?('available_markets') ? hash['available_markets'] : nil
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      href = hash.key?('href') ? hash['href'] : nil
      id = hash.key?('id') ? hash['id'] : nil
      # Parameter is an array, so we need to iterate through it
      images = nil
      unless hash['images'].nil?
        images = []
        hash['images'].each do |structure|
          images << (ImageObject.from_hash(structure) if structure)
        end
      end

      images = nil unless hash.key?('images')
      name = hash.key?('name') ? hash['name'] : nil
      release_date = hash.key?('release_date') ? hash['release_date'] : nil
      release_date_precision =
        hash.key?('release_date_precision') ? hash['release_date_precision'] : nil
      uri = hash.key?('uri') ? hash['uri'] : nil
      # Parameter is an array, so we need to iterate through it
      artists = nil
      unless hash['artists'].nil?
        artists = []
        hash['artists'].each do |structure|
          artists << (SimplifiedArtistObject.from_hash(structure) if structure)
        end
      end

      artists = nil unless hash.key?('artists')
      restrictions = AlbumRestrictionObject.from_hash(hash['restrictions']) if
        hash['restrictions']

      # Create object from extracted values.
      SimplifiedAlbumObject.new(album_type,
                                total_tracks,
                                available_markets,
                                external_urls,
                                href,
                                id,
                                images,
                                name,
                                release_date,
                                release_date_precision,
                                uri,
                                artists,
                                restrictions)
    end

    # Validates an instance of the object from a given value.
    # @param [SimplifiedAlbumObject | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.album_type,
                                ->(val) { AlbumTypeEnum.validate(val) }) and
            APIHelper.valid_type?(value.total_tracks,
                                  ->(val) { val.instance_of? Integer }) and
            APIHelper.valid_type?(value.available_markets,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.external_urls,
                                  ->(val) { ExternalUrlObject.validate(val) },
                                  is_model_hash: true) and
            APIHelper.valid_type?(value.href,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.id,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.images,
                                  ->(val) { ImageObject.validate(val) },
                                  is_model_hash: true,
                                  is_inner_model_hash: true) and
            APIHelper.valid_type?(value.name,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.release_date,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.release_date_precision,
                                  ->(val) { ReleaseDatePrecisionEnum.validate(val) }) and
            APIHelper.valid_type?(value.type,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.uri,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.artists,
                                  ->(val) { SimplifiedArtistObject.validate(val) },
                                  is_model_hash: true,
                                  is_inner_model_hash: true)
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['album_type'],
                              ->(val) { AlbumTypeEnum.validate(val) }) and
          APIHelper.valid_type?(value['total_tracks'],
                                ->(val) { val.instance_of? Integer }) and
          APIHelper.valid_type?(value['available_markets'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['external_urls'],
                                ->(val) { ExternalUrlObject.validate(val) },
                                is_model_hash: true) and
          APIHelper.valid_type?(value['href'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['id'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['images'],
                                ->(val) { ImageObject.validate(val) },
                                is_model_hash: true,
                                is_inner_model_hash: true) and
          APIHelper.valid_type?(value['name'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['release_date'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['release_date_precision'],
                                ->(val) { ReleaseDatePrecisionEnum.validate(val) }) and
          APIHelper.valid_type?(value['type'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['uri'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['artists'],
                                ->(val) { SimplifiedArtistObject.validate(val) },
                                is_model_hash: true,
                                is_inner_model_hash: true)
      )
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} album_type: #{@album_type}, total_tracks: #{@total_tracks},"\
      " available_markets: #{@available_markets}, external_urls: #{@external_urls}, href:"\
      " #{@href}, id: #{@id}, images: #{@images}, name: #{@name}, release_date: #{@release_date},"\
      " release_date_precision: #{@release_date_precision}, restrictions: #{@restrictions}, type:"\
      " #{@type}, uri: #{@uri}, artists: #{@artists}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} album_type: #{@album_type.inspect}, total_tracks: #{@total_tracks.inspect},"\
      " available_markets: #{@available_markets.inspect}, external_urls:"\
      " #{@external_urls.inspect}, href: #{@href.inspect}, id: #{@id.inspect}, images:"\
      " #{@images.inspect}, name: #{@name.inspect}, release_date: #{@release_date.inspect},"\
      " release_date_precision: #{@release_date_precision.inspect}, restrictions:"\
      " #{@restrictions.inspect}, type: #{@type.inspect}, uri: #{@uri.inspect}, artists:"\
      " #{@artists.inspect}>"
    end
  end
end
