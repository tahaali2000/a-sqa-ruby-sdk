# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # PlaylistsRequest Model.
  class PlaylistsRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The new name for the playlist, for example `"My New Playlist Title"`
    # @return [String]
    attr_accessor :name

    # If `true` the playlist will be public, if `false` it will be private.
    # @return [TrueClass | FalseClass]
    attr_accessor :public

    # If `true`, the playlist will become collaborative and other users will be
    # able to modify the playlist in their Spotify client. <br/>
    # _**Note**: You can only set `collaborative` to `true` on non-public
    # playlists._
    # @return [TrueClass | FalseClass]
    attr_accessor :collaborative

    # Value for playlist description as displayed in Spotify Clients and in the
    # Web API.
    # @return [String]
    attr_accessor :description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['public'] = 'public'
      @_hash['collaborative'] = 'collaborative'
      @_hash['description'] = 'description'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        name
        public
        collaborative
        description
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name = SKIP, public = SKIP, collaborative = SKIP,
                   description = SKIP)
      @name = name unless name == SKIP
      @public = public unless public == SKIP
      @collaborative = collaborative unless collaborative == SKIP
      @description = description unless description == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : SKIP
      public = hash.key?('public') ? hash['public'] : SKIP
      collaborative = hash.key?('collaborative') ? hash['collaborative'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP

      # Create object from extracted values.
      PlaylistsRequest.new(name,
                           public,
                           collaborative,
                           description)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name}, public: #{@public}, collaborative: #{@collaborative},"\
      " description: #{@description}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} name: #{@name.inspect}, public: #{@public.inspect}, collaborative:"\
      " #{@collaborative.inspect}, description: #{@description.inspect}>"
    end
  end
end
