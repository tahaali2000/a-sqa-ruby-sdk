# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # ShowBase Model.
  class ShowBase < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A list of the countries in which the show can be played, identified by
    # their [ISO 3166-1
    # alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    # @return [Array[String]]
    attr_accessor :available_markets

    # The copyright statements of the show.
    # @return [Array[CopyrightObject]]
    attr_accessor :copyrights

    # A description of the show. HTML tags are stripped away from this field,
    # use `html_description` field in case HTML tags are needed.
    # @return [String]
    attr_accessor :description

    # A description of the show. This field may contain HTML tags.
    # @return [String]
    attr_accessor :html_description

    # Whether or not the show has explicit content (true = yes it does; false =
    # no it does not OR unknown).
    # @return [TrueClass | FalseClass]
    attr_accessor :explicit

    # External URLs for this show.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # A link to the Web API endpoint providing full details of the show.
    # @return [String]
    attr_accessor :href

    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the
    # show.
    # @return [String]
    attr_accessor :id

    # The cover art for the show in various sizes, widest first.
    # @return [Array[ImageObject]]
    attr_accessor :images

    # True if all of the shows episodes are hosted outside of Spotify's CDN.
    # This field might be `null` in some cases.
    # @return [TrueClass | FalseClass]
    attr_accessor :is_externally_hosted

    # A list of the languages used in the show, identified by their [ISO
    # 639](https://en.wikipedia.org/wiki/ISO_639) code.
    # @return [Array[String]]
    attr_accessor :languages

    # The media type of the show.
    # @return [String]
    attr_accessor :media_type

    # The name of the episode.
    # @return [String]
    attr_accessor :name

    # The publisher of the show.
    # @return [String]
    attr_accessor :publisher

    # The object type.
    # @return [String]
    attr_reader :type

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # the show.
    # @return [String]
    attr_accessor :uri

    # The total number of episodes in the show.
    # @return [Integer]
    attr_accessor :total_episodes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['available_markets'] = 'available_markets'
      @_hash['copyrights'] = 'copyrights'
      @_hash['description'] = 'description'
      @_hash['html_description'] = 'html_description'
      @_hash['explicit'] = 'explicit'
      @_hash['external_urls'] = 'external_urls'
      @_hash['href'] = 'href'
      @_hash['id'] = 'id'
      @_hash['images'] = 'images'
      @_hash['is_externally_hosted'] = 'is_externally_hosted'
      @_hash['languages'] = 'languages'
      @_hash['media_type'] = 'media_type'
      @_hash['name'] = 'name'
      @_hash['publisher'] = 'publisher'
      @_hash['type'] = 'type'
      @_hash['uri'] = 'uri'
      @_hash['total_episodes'] = 'total_episodes'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      []
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(available_markets = nil, copyrights = nil, description = nil,
                   html_description = nil, explicit = nil, external_urls = nil,
                   href = nil, id = nil, images = nil,
                   is_externally_hosted = nil, languages = nil,
                   media_type = nil, name = nil, publisher = nil, uri = nil,
                   total_episodes = nil)
      @available_markets = available_markets
      @copyrights = copyrights
      @description = description
      @html_description = html_description
      @explicit = explicit
      @external_urls = external_urls
      @href = href
      @id = id
      @images = images
      @is_externally_hosted = is_externally_hosted
      @languages = languages
      @media_type = media_type
      @name = name
      @publisher = publisher
      @type = 'show'
      @uri = uri
      @total_episodes = total_episodes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      available_markets =
        hash.key?('available_markets') ? hash['available_markets'] : nil
      # Parameter is an array, so we need to iterate through it
      copyrights = nil
      unless hash['copyrights'].nil?
        copyrights = []
        hash['copyrights'].each do |structure|
          copyrights << (CopyrightObject.from_hash(structure) if structure)
        end
      end

      copyrights = nil unless hash.key?('copyrights')
      description = hash.key?('description') ? hash['description'] : nil
      html_description =
        hash.key?('html_description') ? hash['html_description'] : nil
      explicit = hash.key?('explicit') ? hash['explicit'] : nil
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      href = hash.key?('href') ? hash['href'] : nil
      id = hash.key?('id') ? hash['id'] : nil
      # Parameter is an array, so we need to iterate through it
      images = nil
      unless hash['images'].nil?
        images = []
        hash['images'].each do |structure|
          images << (ImageObject.from_hash(structure) if structure)
        end
      end

      images = nil unless hash.key?('images')
      is_externally_hosted =
        hash.key?('is_externally_hosted') ? hash['is_externally_hosted'] : nil
      languages = hash.key?('languages') ? hash['languages'] : nil
      media_type = hash.key?('media_type') ? hash['media_type'] : nil
      name = hash.key?('name') ? hash['name'] : nil
      publisher = hash.key?('publisher') ? hash['publisher'] : nil
      uri = hash.key?('uri') ? hash['uri'] : nil
      total_episodes =
        hash.key?('total_episodes') ? hash['total_episodes'] : nil

      # Create object from extracted values.
      ShowBase.new(available_markets,
                   copyrights,
                   description,
                   html_description,
                   explicit,
                   external_urls,
                   href,
                   id,
                   images,
                   is_externally_hosted,
                   languages,
                   media_type,
                   name,
                   publisher,
                   uri,
                   total_episodes)
    end

    # Validates an instance of the object from a given value.
    # @param [ShowBase | Hash] The value against the validation is performed.
    def self.validate(value)
      if value.instance_of? self
        return (
          APIHelper.valid_type?(value.available_markets,
                                ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.copyrights,
                                  ->(val) { CopyrightObject.validate(val) },
                                  is_model_hash: true,
                                  is_inner_model_hash: true) and
            APIHelper.valid_type?(value.description,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.html_description,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.explicit,
                                  ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
            APIHelper.valid_type?(value.external_urls,
                                  ->(val) { ExternalUrlObject.validate(val) },
                                  is_model_hash: true) and
            APIHelper.valid_type?(value.href,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.id,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.images,
                                  ->(val) { ImageObject.validate(val) },
                                  is_model_hash: true,
                                  is_inner_model_hash: true) and
            APIHelper.valid_type?(value.is_externally_hosted,
                                  ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
            APIHelper.valid_type?(value.languages,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.media_type,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.name,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.publisher,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.type,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.uri,
                                  ->(val) { val.instance_of? String }) and
            APIHelper.valid_type?(value.total_episodes,
                                  ->(val) { val.instance_of? Integer })
        )
      end

      return false unless value.instance_of? Hash

      (
        APIHelper.valid_type?(value['available_markets'],
                              ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['copyrights'],
                                ->(val) { CopyrightObject.validate(val) },
                                is_model_hash: true,
                                is_inner_model_hash: true) and
          APIHelper.valid_type?(value['description'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['html_description'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['explicit'],
                                ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
          APIHelper.valid_type?(value['external_urls'],
                                ->(val) { ExternalUrlObject.validate(val) },
                                is_model_hash: true) and
          APIHelper.valid_type?(value['href'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['id'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['images'],
                                ->(val) { ImageObject.validate(val) },
                                is_model_hash: true,
                                is_inner_model_hash: true) and
          APIHelper.valid_type?(value['is_externally_hosted'],
                                ->(val) { val.instance_of? TrueClass or val.instance_of? FalseClass }) and
          APIHelper.valid_type?(value['languages'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['media_type'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['name'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['publisher'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['type'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['uri'],
                                ->(val) { val.instance_of? String }) and
          APIHelper.valid_type?(value['total_episodes'],
                                ->(val) { val.instance_of? Integer })
      )
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} available_markets: #{@available_markets}, copyrights: #{@copyrights},"\
      " description: #{@description}, html_description: #{@html_description}, explicit:"\
      " #{@explicit}, external_urls: #{@external_urls}, href: #{@href}, id: #{@id}, images:"\
      " #{@images}, is_externally_hosted: #{@is_externally_hosted}, languages: #{@languages},"\
      " media_type: #{@media_type}, name: #{@name}, publisher: #{@publisher}, type: #{@type}, uri:"\
      " #{@uri}, total_episodes: #{@total_episodes}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} available_markets: #{@available_markets.inspect}, copyrights:"\
      " #{@copyrights.inspect}, description: #{@description.inspect}, html_description:"\
      " #{@html_description.inspect}, explicit: #{@explicit.inspect}, external_urls:"\
      " #{@external_urls.inspect}, href: #{@href.inspect}, id: #{@id.inspect}, images:"\
      " #{@images.inspect}, is_externally_hosted: #{@is_externally_hosted.inspect}, languages:"\
      " #{@languages.inspect}, media_type: #{@media_type.inspect}, name: #{@name.inspect},"\
      " publisher: #{@publisher.inspect}, type: #{@type.inspect}, uri: #{@uri.inspect},"\
      " total_episodes: #{@total_episodes.inspect}>"
    end
  end
end
