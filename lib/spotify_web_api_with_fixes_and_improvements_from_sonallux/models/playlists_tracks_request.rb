# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # PlaylistsTracksRequest Model.
  class PlaylistsTracksRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A JSON array of the [Spotify
    # URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For
    # example: `{"uris":
    # ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZC
    # A6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`<br/>A maximum of 100
    # items can be added in one request. _**Note**: if the `uris` parameter is
    # present in the query string, any URIs listed here in the body will be
    # ignored._
    # @return [Array[String]]
    attr_accessor :uris

    # The position to insert the items, a zero-based index. For example, to
    # insert the items in the first position: `position=0` ; to insert the items
    # in the third position: `position=2`. If omitted, the items will be
    # appended to the playlist. Items are added in the order they appear in the
    # uris array. For example: `{"uris":
    # ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZC
    # A6M"], "position": 3}`
    # @return [Integer]
    attr_accessor :position

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['uris'] = 'uris'
      @_hash['position'] = 'position'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        uris
        position
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(uris = SKIP, position = SKIP)
      @uris = uris unless uris == SKIP
      @position = position unless position == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      uris = hash.key?('uris') ? hash['uris'] : SKIP
      position = hash.key?('position') ? hash['position'] : SKIP

      # Create object from extracted values.
      PlaylistsTracksRequest.new(uris,
                                 position)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} uris: #{@uris}, position: #{@position}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} uris: #{@uris.inspect}, position: #{@position.inspect}>"
    end
  end
end
