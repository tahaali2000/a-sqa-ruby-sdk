# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # SectionObject Model.
  class SectionObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The starting point (in seconds) of the section.
    # @return [Float]
    attr_accessor :start

    # The duration (in seconds) of the section.
    # @return [Float]
    attr_accessor :duration

    # The confidence, from 0.0 to 1.0, of the reliability of the section's
    # "designation".
    # @return [Float]
    attr_accessor :confidence

    # The overall loudness of the section in decibels (dB). Loudness values are
    # useful for comparing relative loudness of sections within tracks.
    # @return [Float]
    attr_accessor :loudness

    # The overall estimated tempo of the section in beats per minute (BPM). In
    # musical terminology, tempo is the speed or pace of a given piece and
    # derives directly from the average beat duration.
    # @return [Float]
    attr_accessor :tempo

    # The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some
    # tracks contain tempo changes or sounds which don't contain tempo (like
    # pure speech) which would correspond to a low value in this field.
    # @return [Float]
    attr_accessor :tempo_confidence

    # The estimated overall key of the section. The values in this field ranging
    # from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g.
    # 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is
    # -1.
    # @return [Integer]
    attr_accessor :key

    # The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with
    # many key changes may correspond to low values in this field.
    # @return [Float]
    attr_accessor :key_confidence

    # Indicates the modality (major or minor) of a section, the type of scale
    # from which its melodic content is derived. This field will contain a 0 for
    # "minor", a 1 for "major", or a -1 for no result. Note that the major key
    # (e.g. C major) could more likely be confused with the minor key at 3
    # semitones lower (e.g. A minor) as both keys carry the same pitches.
    # @return [ModeEnum]
    attr_accessor :mode

    # The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    # @return [Float]
    attr_accessor :mode_confidence

    # An estimated time signature. The time signature (meter) is a notational
    # convention to specify how many beats are in each bar (or measure). The
    # time signature ranges from 3 to 7 indicating time signatures of "3/4", to
    # "7/4".
    # @return [Integer]
    attr_accessor :time_signature

    # The confidence, from 0.0 to 1.0, of the reliability of the
    # `time_signature`. Sections with time signature changes may correspond to
    # low values in this field.
    # @return [Float]
    attr_accessor :time_signature_confidence

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['start'] = 'start'
      @_hash['duration'] = 'duration'
      @_hash['confidence'] = 'confidence'
      @_hash['loudness'] = 'loudness'
      @_hash['tempo'] = 'tempo'
      @_hash['tempo_confidence'] = 'tempo_confidence'
      @_hash['key'] = 'key'
      @_hash['key_confidence'] = 'key_confidence'
      @_hash['mode'] = 'mode'
      @_hash['mode_confidence'] = 'mode_confidence'
      @_hash['time_signature'] = 'time_signature'
      @_hash['time_signature_confidence'] = 'time_signature_confidence'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        start
        duration
        confidence
        loudness
        tempo
        tempo_confidence
        key
        key_confidence
        mode
        mode_confidence
        time_signature
        time_signature_confidence
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(start = SKIP, duration = SKIP, confidence = SKIP,
                   loudness = SKIP, tempo = SKIP, tempo_confidence = SKIP,
                   key = SKIP, key_confidence = SKIP, mode = SKIP,
                   mode_confidence = SKIP, time_signature = SKIP,
                   time_signature_confidence = SKIP)
      @start = start unless start == SKIP
      @duration = duration unless duration == SKIP
      @confidence = confidence unless confidence == SKIP
      @loudness = loudness unless loudness == SKIP
      @tempo = tempo unless tempo == SKIP
      @tempo_confidence = tempo_confidence unless tempo_confidence == SKIP
      @key = key unless key == SKIP
      @key_confidence = key_confidence unless key_confidence == SKIP
      @mode = mode unless mode == SKIP
      @mode_confidence = mode_confidence unless mode_confidence == SKIP
      @time_signature = time_signature unless time_signature == SKIP
      unless time_signature_confidence == SKIP
        @time_signature_confidence =
          time_signature_confidence
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      start = hash.key?('start') ? hash['start'] : SKIP
      duration = hash.key?('duration') ? hash['duration'] : SKIP
      confidence = hash.key?('confidence') ? hash['confidence'] : SKIP
      loudness = hash.key?('loudness') ? hash['loudness'] : SKIP
      tempo = hash.key?('tempo') ? hash['tempo'] : SKIP
      tempo_confidence =
        hash.key?('tempo_confidence') ? hash['tempo_confidence'] : SKIP
      key = hash.key?('key') ? hash['key'] : SKIP
      key_confidence =
        hash.key?('key_confidence') ? hash['key_confidence'] : SKIP
      mode = hash.key?('mode') ? hash['mode'] : SKIP
      mode_confidence =
        hash.key?('mode_confidence') ? hash['mode_confidence'] : SKIP
      time_signature =
        hash.key?('time_signature') ? hash['time_signature'] : SKIP
      time_signature_confidence =
        hash.key?('time_signature_confidence') ? hash['time_signature_confidence'] : SKIP

      # Create object from extracted values.
      SectionObject.new(start,
                        duration,
                        confidence,
                        loudness,
                        tempo,
                        tempo_confidence,
                        key,
                        key_confidence,
                        mode,
                        mode_confidence,
                        time_signature,
                        time_signature_confidence)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} start: #{@start}, duration: #{@duration}, confidence: #{@confidence},"\
      " loudness: #{@loudness}, tempo: #{@tempo}, tempo_confidence: #{@tempo_confidence}, key:"\
      " #{@key}, key_confidence: #{@key_confidence}, mode: #{@mode}, mode_confidence:"\
      " #{@mode_confidence}, time_signature: #{@time_signature}, time_signature_confidence:"\
      " #{@time_signature_confidence}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} start: #{@start.inspect}, duration: #{@duration.inspect}, confidence:"\
      " #{@confidence.inspect}, loudness: #{@loudness.inspect}, tempo: #{@tempo.inspect},"\
      " tempo_confidence: #{@tempo_confidence.inspect}, key: #{@key.inspect}, key_confidence:"\
      " #{@key_confidence.inspect}, mode: #{@mode.inspect}, mode_confidence:"\
      " #{@mode_confidence.inspect}, time_signature: #{@time_signature.inspect},"\
      " time_signature_confidence: #{@time_signature_confidence.inspect}>"
    end
  end
end
