# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # ArtistObject Model.
  class ArtistObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Known external URLs for this artist.
    # @return [ExternalUrlObject]
    attr_accessor :external_urls

    # Information about the followers of the artist.
    # @return [FollowersObject]
    attr_accessor :followers

    # A list of the genres the artist is associated with. If not yet classified,
    # the array is empty.
    # @return [Array[String]]
    attr_accessor :genres

    # A link to the Web API endpoint providing full details of the artist.
    # @return [String]
    attr_accessor :href

    # The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the
    # artist.
    # @return [String]
    attr_accessor :id

    # Images of the artist in various sizes, widest first.
    # @return [Array[ImageObject]]
    attr_accessor :images

    # The name of the artist.
    # @return [String]
    attr_accessor :name

    # The popularity of the artist. The value will be between 0 and 100, with
    # 100 being the most popular. The artist's popularity is calculated from the
    # popularity of all the artist's tracks.
    # @return [Integer]
    attr_accessor :popularity

    # The object type.
    # @return [TypeEnum]
    attr_accessor :type

    # The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for
    # the artist.
    # @return [String]
    attr_accessor :uri

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['external_urls'] = 'external_urls'
      @_hash['followers'] = 'followers'
      @_hash['genres'] = 'genres'
      @_hash['href'] = 'href'
      @_hash['id'] = 'id'
      @_hash['images'] = 'images'
      @_hash['name'] = 'name'
      @_hash['popularity'] = 'popularity'
      @_hash['type'] = 'type'
      @_hash['uri'] = 'uri'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        external_urls
        followers
        genres
        href
        id
        images
        name
        popularity
        type
        uri
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(external_urls = SKIP, followers = SKIP, genres = SKIP,
                   href = SKIP, id = SKIP, images = SKIP, name = SKIP,
                   popularity = SKIP, type = SKIP, uri = SKIP)
      @external_urls = external_urls unless external_urls == SKIP
      @followers = followers unless followers == SKIP
      @genres = genres unless genres == SKIP
      @href = href unless href == SKIP
      @id = id unless id == SKIP
      @images = images unless images == SKIP
      @name = name unless name == SKIP
      @popularity = popularity unless popularity == SKIP
      @type = type unless type == SKIP
      @uri = uri unless uri == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      external_urls = ExternalUrlObject.from_hash(hash['external_urls']) if hash['external_urls']
      followers = FollowersObject.from_hash(hash['followers']) if hash['followers']
      genres = hash.key?('genres') ? hash['genres'] : SKIP
      href = hash.key?('href') ? hash['href'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      images = nil
      unless hash['images'].nil?
        images = []
        hash['images'].each do |structure|
          images << (ImageObject.from_hash(structure) if structure)
        end
      end

      images = SKIP unless hash.key?('images')
      name = hash.key?('name') ? hash['name'] : SKIP
      popularity = hash.key?('popularity') ? hash['popularity'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP
      uri = hash.key?('uri') ? hash['uri'] : SKIP

      # Create object from extracted values.
      ArtistObject.new(external_urls,
                       followers,
                       genres,
                       href,
                       id,
                       images,
                       name,
                       popularity,
                       type,
                       uri)
    end

    # Validates an instance of the object from a given value.
    # @param [ArtistObject | Hash] The value against the validation is performed.
    def self.validate(value)
      return true if value.instance_of? self

      return false unless value.instance_of? Hash

      true
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} external_urls: #{@external_urls}, followers: #{@followers}, genres:"\
      " #{@genres}, href: #{@href}, id: #{@id}, images: #{@images}, name: #{@name}, popularity:"\
      " #{@popularity}, type: #{@type}, uri: #{@uri}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} external_urls: #{@external_urls.inspect}, followers: #{@followers.inspect},"\
      " genres: #{@genres.inspect}, href: #{@href.inspect}, id: #{@id.inspect}, images:"\
      " #{@images.inspect}, name: #{@name.inspect}, popularity: #{@popularity.inspect}, type:"\
      " #{@type.inspect}, uri: #{@uri.inspect}>"
    end
  end
end
