# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # TimeIntervalObject Model.
  class TimeIntervalObject < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The starting point (in seconds) of the time interval.
    # @return [Float]
    attr_accessor :start

    # The duration (in seconds) of the time interval.
    # @return [Float]
    attr_accessor :duration

    # The confidence, from 0.0 to 1.0, of the reliability of the interval.
    # @return [Float]
    attr_accessor :confidence

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['start'] = 'start'
      @_hash['duration'] = 'duration'
      @_hash['confidence'] = 'confidence'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        start
        duration
        confidence
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(start = SKIP, duration = SKIP, confidence = SKIP)
      @start = start unless start == SKIP
      @duration = duration unless duration == SKIP
      @confidence = confidence unless confidence == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      start = hash.key?('start') ? hash['start'] : SKIP
      duration = hash.key?('duration') ? hash['duration'] : SKIP
      confidence = hash.key?('confidence') ? hash['confidence'] : SKIP

      # Create object from extracted values.
      TimeIntervalObject.new(start,
                             duration,
                             confidence)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} start: #{@start}, duration: #{@duration}, confidence: #{@confidence}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} start: #{@start.inspect}, duration: #{@duration.inspect}, confidence:"\
      " #{@confidence.inspect}>"
    end
  end
end
