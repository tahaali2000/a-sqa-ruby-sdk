# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # MePlayerRequest Model.
  class MePlayerRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # A JSON array containing the ID of the device on which playback should be
    # started/transferred.<br/>For
    # example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although
    # an array is accepted, only a single device_id is currently supported.
    # Supplying more than one will return `400 Bad Request`_
    # @return [Array[String]]
    attr_accessor :device_ids

    # **true**: ensure playback happens on new device.<br/>**false** or not
    # provided: keep the current playback state.
    # @return [TrueClass | FalseClass]
    attr_accessor :play

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['device_ids'] = 'device_ids'
      @_hash['play'] = 'play'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        play
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(device_ids = nil, play = SKIP)
      @device_ids = device_ids
      @play = play unless play == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      device_ids = hash.key?('device_ids') ? hash['device_ids'] : nil
      play = hash.key?('play') ? hash['play'] : SKIP

      # Create object from extracted values.
      MePlayerRequest.new(device_ids,
                          play)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} device_ids: #{@device_ids}, play: #{@play}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} device_ids: #{@device_ids.inspect}, play: #{@play.inspect}>"
    end
  end
end
