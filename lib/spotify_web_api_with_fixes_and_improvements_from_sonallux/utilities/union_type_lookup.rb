# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module SpotifyWebApiWithFixesAndImprovementsFromSonallux
  # The `UnionTypeLookUp` class serves as a utility class for
  # storing and managing type combinator templates. It acts as a container for the templates
  # used in handling various oneof/anyof instances within the sdk.
  class UnionTypeLookUp
    include CoreLibrary
    # rubocop:disable Lint/RedundantCopDisableDirective, Style/HashSyntax, Layout/FirstArgumentIndentation
    def self.union_types
      {
        :PlaylistTrackObjectTrack => OneOf.new(
          [
            LeafType.new(TrackObject),
            LeafType.new(EpisodeObject)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :QueueObjectCurrentlyPlaying => OneOf.new(
          [
            LeafType.new(TrackObject),
            LeafType.new(EpisodeObject)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :QueueObjectQueue => OneOf.new(
          [
            LeafType.new(TrackObject),
            LeafType.new(EpisodeObject)
          ],
          UnionTypeContext.new(
            is_array: true,
            is_optional: true
          )
        ),

        :CurrentlyPlayingContextObjectItem => OneOf.new(
          [
            LeafType.new(TrackObject),
            LeafType.new(EpisodeObject)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        ),

        :CurrentlyPlayingObjectItem => OneOf.new(
          [
            LeafType.new(TrackObject),
            LeafType.new(EpisodeObject)
          ],
          UnionTypeContext.new(
            is_optional: true
          )
        )
      }
    end
    # rubocop:enable Lint/RedundantCopDisableDirective, Style/HashSyntax, Layout/FirstArgumentIndentation

    def self.get(name)
      UnionTypeLookUp.union_types[name]
    end
  end
end
