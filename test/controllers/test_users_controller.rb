# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class UsersControllerTest < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.users
    @response_catcher = @controller.http_call_back
  end

  # Get detailed profile information about the current user (including the
  #current user's username).
  #
  def test_get_current_users_profile

    # Perform the API call through the SDK function
    result = @controller.get_current_users_profile()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get public profile information about a Spotify user.
  #
  def test_get_users_profile
    # Parameters for the API call
    user_id = 'smedjan'

    # Perform the API call through the SDK function
    result = @controller.get_users_profile(user_id)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Add the current user as a follower of a playlist.
  #
  def test_follow_playlist
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    body = nil

    # Perform the API call through the SDK function
    @controller.follow_playlist(playlist_id, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Remove the current user as a follower of a playlist.
  #
  def test_unfollow_playlist
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'

    # Perform the API call through the SDK function
    @controller.unfollow_playlist(playlist_id)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Get the current user's followed artists.
  #
  def test_get_followed
    # Parameters for the API call
    type = 'artist'
    after = '0I2XqVXqHScXjHhk6AYYRe'
    limit = 20

    # Perform the API call through the SDK function
    result = @controller.get_followed(type, after: after, limit: limit)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Add the current user as a follower of one or more artists or other Spotify users.
  #
  def test_follow_artists_users
    # Parameters for the API call
    type = 'artist'
    ids = '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'
    body = nil

    # Perform the API call through the SDK function
    @controller.follow_artists_users(type, ids, body: body)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Remove the current user as a follower of one or more artists or other Spotify users.
  #
  def test_unfollow_artists_users
    # Parameters for the API call
    type = 'artist'
    ids = '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'
    body = nil

    # Perform the API call through the SDK function
    @controller.unfollow_artists_users(type, ids, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Check to see if the current user is following one or more artists or other Spotify users.
  #
  def test_check_current_user_follows
    # Parameters for the API call
    type = 'artist'
    ids = '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'

    # Perform the API call through the SDK function
    result = @controller.check_current_user_follows(type, ids)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    assert_equal("[\r\n  false,\r\n  true\r\n]", @response_catcher.response.raw_body)
  end

  # Check to see if one or more Spotify users are following a specified playlist.
  #
  def test_check_if_user_follows_playlist
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    ids = 'jmperezperez,thelinmichael,wizzler'

    # Perform the API call through the SDK function
    result = @controller.check_if_user_follows_playlist(playlist_id, ids)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    assert_equal("[\r\n  false,\r\n  true\r\n]", @response_catcher.response.raw_body)
  end

  # Get the current user's top artists based on calculated affinity.
  #
  def test_get_users_top_artists
    # Parameters for the API call
    time_range = 'medium_term'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_users_top_artists(time_range: time_range,
                                               limit: limit, offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get the current user's top tracks based on calculated affinity.
  #
  def test_get_users_top_tracks
    # Parameters for the API call
    time_range = 'medium_term'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_users_top_tracks(time_range: time_range,
                                              limit: limit, offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end