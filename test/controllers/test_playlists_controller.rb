# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class PlaylistsControllerTest < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.playlists
    @response_catcher = @controller.http_call_back
  end

  # Get a playlist owned by a Spotify user.
  #
  def test_get_playlist
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    market = 'ES'
    fields = 'items(added_by.id,track(name,href,album(name,href)))'
    additional_types = nil

    # Perform the API call through the SDK function
    result = @controller.get_playlist(playlist_id, market: market,
                                      fields: fields,
                                      additional_types: additional_types)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Change a playlist's name and public/private state. (The user must, of
  #course, own the playlist.)
  #
  def test_change_playlist_details
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    body = nil

    # Perform the API call through the SDK function
    @controller.change_playlist_details(playlist_id, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Get full details of the items of a playlist owned by a Spotify user.
  #
  def test_get_playlists_tracks
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    market = 'ES'
    fields = 'items(added_by.id,track(name,href,album(name,href)))'
    limit = 20
    offset = 0
    additional_types = nil

    # Perform the API call through the SDK function
    result = @controller.get_playlists_tracks(
      playlist_id, market: market, fields: fields, limit: limit, offset: offset,
      additional_types: additional_types
    )

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Add one or more items to a user's playlist.
  #
  def test_add_tracks_to_playlist
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    position = 0
    uris = 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.add_tracks_to_playlist(playlist_id, position: position,
                                                uris: uris, body: body)

    # Test response code
    assert_equal(201, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Either reorder or replace items in a playlist depending on the request's parameters.
  #To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
  #To replace items, include `uris` as either a query parameter or in the request's body.
  #Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
  #<br/>
  #**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
  #These operations can't be applied together in a single request.
  #
  def test_reorder_or_replace_playlists_tracks
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    uris = nil
    body = nil

    # Perform the API call through the SDK function
    result = @controller.reorder_or_replace_playlists_tracks(playlist_id,
                                                             uris: uris,
                                                             body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Remove one or more items from a user's playlist.
  #
  def test_remove_tracks_playlist
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.remove_tracks_playlist(playlist_id, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a list of the playlists owned or followed by the current Spotify
  #user.
  #
  def test_get_a_list_of_current_users_playlists
    # Parameters for the API call
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_a_list_of_current_users_playlists(limit: limit,
                                                               offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a list of the playlists owned or followed by a Spotify user.
  #
  def test_get_list_users_playlists
    # Parameters for the API call
    user_id = 'smedjan'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_list_users_playlists(user_id, limit: limit,
                                                  offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Create a playlist for a Spotify user. (The playlist will be empty until
  #you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)
  #Each user is generally limited to a maximum of 11000 playlists.
  #
  def test_create_playlist
    # Parameters for the API call
    user_id = 'smedjan'
    body = nil

    # Perform the API call through the SDK function
    result = @controller.create_playlist(user_id, body: body)

    # Test response code
    assert_equal(201, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).
  #
  def test_get_featured_playlists
    # Parameters for the API call
    locale = 'sv_SE'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_featured_playlists(locale: locale, limit: limit,
                                                offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a list of Spotify playlists tagged with a particular category.
  #
  def test_get_a_categories_playlists
    # Parameters for the API call
    category_id = 'dinner'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_a_categories_playlists(category_id, limit: limit,
                                                    offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get the current image associated with a specific playlist.
  #
  def test_get_playlist_cover
    # Parameters for the API call
    playlist_id = '3cEYpjA9oz9GiPac4AsH4n'

    # Perform the API call through the SDK function
    result = @controller.get_playlist_cover(playlist_id)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end