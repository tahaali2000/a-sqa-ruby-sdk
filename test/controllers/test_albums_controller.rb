# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class AlbumsControllerTest < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.albums
    @response_catcher = @controller.http_call_back
  end

  # Get Spotify catalog information for a single album.
  #
  def test_get_an_album
    # Parameters for the API call
    id = '4aawyAB9vmqN3uQ7FjRGTy'
    market = 'ES'

    # Perform the API call through the SDK function
    result = @controller.get_an_album(id, market: market)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get Spotify catalog information for multiple albums identified by their Spotify IDs.
  #
  def test_get_multiple_albums
    # Parameters for the API call
    ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc'
    market = 'ES'

    # Perform the API call through the SDK function
    result = @controller.get_multiple_albums(ids, market: market)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get Spotify catalog information about an album’s tracks.
  #Optional parameters can be used to limit the number of tracks returned.
  #
  def test_get_an_albums_tracks
    # Parameters for the API call
    id = '4aawyAB9vmqN3uQ7FjRGTy'
    market = 'ES'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_an_albums_tracks(id, market: market, limit: limit,
                                              offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a list of the albums saved in the current Spotify user's 'Your Music' library.
  #
  def test_get_users_saved_albums
    # Parameters for the API call
    limit = 20
    offset = 0
    market = 'ES'

    # Perform the API call through the SDK function
    result = @controller.get_users_saved_albums(limit: limit, offset: offset,
                                                market: market)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Save one or more albums to the current user's 'Your Music' library.
  #
  def test_save_albums_user
    # Parameters for the API call
    ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc'
    body = nil

    # Perform the API call through the SDK function
    @controller.save_albums_user(ids, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Remove one or more albums from the current user's 'Your Music' library.
  #
  def test_remove_albums_user
    # Parameters for the API call
    ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc'
    body = nil

    # Perform the API call through the SDK function
    @controller.remove_albums_user(ids, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.
  #
  def test_check_users_saved_albums
    # Parameters for the API call
    ids = '382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc'

    # Perform the API call through the SDK function
    result = @controller.check_users_saved_albums(ids)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    assert_equal("[\r\n  false,\r\n  true\r\n]", @response_catcher.response.raw_body)
  end

  # Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).
  #
  def test_get_new_releases
    # Parameters for the API call
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_new_releases(limit: limit, offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end