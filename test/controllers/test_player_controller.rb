# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class PlayerControllerTest < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.player
    @response_catcher = @controller.http_call_back
  end

  # Get information about the user’s current playback state, including track or episode, progress, and active device.
  #
  def test_get_information_about_the_users_current_playback
    # Parameters for the API call
    market = 'ES'
    additional_types = nil

    # Perform the API call through the SDK function
    result = @controller.get_information_about_the_users_current_playback(
      market: market, additional_types: additional_types
    )

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get information about the user’s current playback state, including track or episode, progress, and active device.
  #
  def test_get_information_about_the_users_current_playback1
    # Parameters for the API call
    market = 'ES'
    additional_types = nil

    # Perform the API call through the SDK function
    result = @controller.get_information_about_the_users_current_playback(
      market: market, additional_types: additional_types
    )

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_transfer_a_users_playback
    # Parameters for the API call
    body = nil

    # Perform the API call through the SDK function
    @controller.transfer_a_users_playback(body: body)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response.
  #
  def test_get_a_users_available_devices

    # Perform the API call through the SDK function
    result = @controller.get_a_users_available_devices()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get the object currently being played on the user's Spotify account.
  #
  def test_get_the_users_currently_playing_track
    # Parameters for the API call
    market = 'ES'
    additional_types = nil

    # Perform the API call through the SDK function
    result = @controller.get_the_users_currently_playing_track(
      market: market, additional_types: additional_types
    )

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Start a new context or resume current playback on the user's active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_start_a_users_playback
    # Parameters for the API call
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'
    body = nil

    # Perform the API call through the SDK function
    @controller.start_a_users_playback(device_id: device_id, body: body)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Pause playback on the user's account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_pause_a_users_playback
    # Parameters for the API call
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.pause_a_users_playback(device_id: device_id)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_skip_users_playback_to_next_track
    # Parameters for the API call
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.skip_users_playback_to_next_track(device_id: device_id)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_skip_users_playback_to_previous_track
    # Parameters for the API call
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.skip_users_playback_to_previous_track(device_id: device_id)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_seek_to_position_in_currently_playing_track
    # Parameters for the API call
    position_ms = 25000
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.seek_to_position_in_currently_playing_track(
      position_ms, device_id: device_id
    )

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Set the repeat mode for the user's playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_set_repeat_mode_on_users_playback
    # Parameters for the API call
    state = 'context'
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.set_repeat_mode_on_users_playback(state, device_id: device_id)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_set_volume_for_users_playback
    # Parameters for the API call
    volume_percent = 50
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.set_volume_for_users_playback(volume_percent,
                                              device_id: device_id)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_toggle_shuffle_for_users_playback
    # Parameters for the API call
    state = true
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.toggle_shuffle_for_users_playback(state, device_id: device_id)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

  # Get tracks from the current user's recently played tracks.
  #_**Note**: Currently doesn't support podcast episodes._
  #
  def test_get_recently_played
    # Parameters for the API call
    limit = 20
    after = 1484811043508
    before = nil

    # Perform the API call through the SDK function
    result = @controller.get_recently_played(limit: limit, after: after,
                                             before: before)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get the list of objects that make up the user's queue.
  #
  def test_get_queue

    # Perform the API call through the SDK function
    result = @controller.get_queue()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Add an item to the end of the user's current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints.
  #
  def test_add_to_queue
    # Parameters for the API call
    uri = 'spotify:track:4iV5W9uYEdYUVa79Axb7Rh'
    device_id = '0d1841b0976bae2a3a310dd74c0f3df354899bc8'

    # Perform the API call through the SDK function
    @controller.add_to_queue(uri, device_id: device_id)

    # Test response code
    assert_equal(204, @response_catcher.response.status_code)
  end

end