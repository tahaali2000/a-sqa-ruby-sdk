# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class TracksControllerTest < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.tracks
    @response_catcher = @controller.http_call_back
  end

  # Get Spotify catalog information for a single track identified by its
  #unique Spotify ID.
  #
  def test_get_track
    # Parameters for the API call
    id = '11dFghVXANMlKmJXsNCbNl'
    market = 'ES'

    # Perform the API call through the SDK function
    result = @controller.get_track(id, market: market)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get Spotify catalog information for multiple tracks based on their Spotify IDs.
  #
  def test_get_several_tracks
    # Parameters for the API call
    ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
    market = 'ES'

    # Perform the API call through the SDK function
    result = @controller.get_several_tracks(ids, market: market)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a list of the songs saved in the current Spotify user's 'Your Music' library.
  #
  def test_get_users_saved_tracks
    # Parameters for the API call
    market = 'ES'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_users_saved_tracks(market: market, limit: limit,
                                                offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Save one or more tracks to the current user's 'Your Music' library.
  #
  def test_save_tracks_user
    # Parameters for the API call
    ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
    body = nil

    # Perform the API call through the SDK function
    @controller.save_tracks_user(ids, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Remove one or more tracks from the current user's 'Your Music' library.
  #
  def test_remove_tracks_user
    # Parameters for the API call
    ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
    body = nil

    # Perform the API call through the SDK function
    @controller.remove_tracks_user(ids, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.
  #
  def test_check_users_saved_tracks
    # Parameters for the API call
    ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'

    # Perform the API call through the SDK function
    result = @controller.check_users_saved_tracks(ids)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    assert_equal("[\r\n  false,\r\n  true\r\n]", @response_catcher.response.raw_body)
  end

  # Get audio features for multiple tracks based on their Spotify IDs.
  #
  def test_get_several_audio_features
    # Parameters for the API call
    ids = '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'

    # Perform the API call through the SDK function
    result = @controller.get_several_audio_features(ids)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get audio feature information for a single track identified by its unique
  #Spotify ID.
  #
  def test_get_audio_features
    # Parameters for the API call
    id = '11dFghVXANMlKmJXsNCbNl'

    # Perform the API call through the SDK function
    result = @controller.get_audio_features(id)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the trackâ€™s structure and musical content, including rhythm, pitch, and timbre.
  #
  def test_get_audio_analysis
    # Parameters for the API call
    id = '11dFghVXANMlKmJXsNCbNl'

    # Perform the API call through the SDK function
    result = @controller.get_audio_analysis(id)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.
  #
  #For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
  #
  def test_get_recommendations
    # Parameters for the API call
    limit = 20
    market = 'ES'
    seed_artists = '4NHQUGzhtTLFvgF5SZesLK'
    seed_genres = 'classical,country'
    seed_tracks = '0c6xIDDpzE81m2q797ordA'
    min_acousticness = nil
    max_acousticness = nil
    target_acousticness = nil
    min_danceability = nil
    max_danceability = nil
    target_danceability = nil
    min_duration_ms = nil
    max_duration_ms = nil
    target_duration_ms = nil
    min_energy = nil
    max_energy = nil
    target_energy = nil
    min_instrumentalness = nil
    max_instrumentalness = nil
    target_instrumentalness = nil
    min_key = nil
    max_key = nil
    target_key = nil
    min_liveness = nil
    max_liveness = nil
    target_liveness = nil
    min_loudness = nil
    max_loudness = nil
    target_loudness = nil
    min_mode = nil
    max_mode = nil
    target_mode = nil
    min_popularity = nil
    max_popularity = nil
    target_popularity = nil
    min_speechiness = nil
    max_speechiness = nil
    target_speechiness = nil
    min_tempo = nil
    max_tempo = nil
    target_tempo = nil
    min_time_signature = nil
    max_time_signature = nil
    target_time_signature = nil
    min_valence = nil
    max_valence = nil
    target_valence = nil

    # Perform the API call through the SDK function
    result = @controller.get_recommendations(
      limit: limit, market: market, seed_artists: seed_artists,
      seed_genres: seed_genres, seed_tracks: seed_tracks,
      min_acousticness: min_acousticness, max_acousticness: max_acousticness,
      target_acousticness: target_acousticness,
      min_danceability: min_danceability, max_danceability: max_danceability,
      target_danceability: target_danceability,
      min_duration_ms: min_duration_ms, max_duration_ms: max_duration_ms,
      target_duration_ms: target_duration_ms, min_energy: min_energy,
      max_energy: max_energy, target_energy: target_energy,
      min_instrumentalness: min_instrumentalness,
      max_instrumentalness: max_instrumentalness,
      target_instrumentalness: target_instrumentalness, min_key: min_key,
      max_key: max_key, target_key: target_key, min_liveness: min_liveness,
      max_liveness: max_liveness, target_liveness: target_liveness,
      min_loudness: min_loudness, max_loudness: max_loudness,
      target_loudness: target_loudness, min_mode: min_mode, max_mode: max_mode,
      target_mode: target_mode, min_popularity: min_popularity,
      max_popularity: max_popularity, target_popularity: target_popularity,
      min_speechiness: min_speechiness, max_speechiness: max_speechiness,
      target_speechiness: target_speechiness, min_tempo: min_tempo,
      max_tempo: max_tempo, target_tempo: target_tempo,
      min_time_signature: min_time_signature,
      max_time_signature: max_time_signature,
      target_time_signature: target_time_signature, min_valence: min_valence,
      max_valence: max_valence, target_valence: target_valence
    )

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end