# spotify_web_api_with_fixes_and_improvements_from_sonallux
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class ShowsControllerTest < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.shows
    @response_catcher = @controller.http_call_back
  end

  # Get Spotify catalog information for a single show identified by its
  #unique Spotify ID.
  #
  def test_get_a_show
    # Parameters for the API call
    id = '38bS44xjbVVZ3No3ByF1dJ'
    market = 'ES'

    # Perform the API call through the SDK function
    result = @controller.get_a_show(id, market: market)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get Spotify catalog information for several shows based on their Spotify IDs.
  #
  def test_get_multiple_shows
    # Parameters for the API call
    ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'
    market = 'ES'

    # Perform the API call through the SDK function
    result = @controller.get_multiple_shows(ids, market: market)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get Spotify catalog information about an showâ€™s episodes. Optional parameters can be used to limit the number of episodes returned.
  #
  def test_get_a_shows_episodes
    # Parameters for the API call
    id = '38bS44xjbVVZ3No3ByF1dJ'
    market = 'ES'
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_a_shows_episodes(id, market: market, limit: limit,
                                              offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.
  #
  def test_get_users_saved_shows
    # Parameters for the API call
    limit = 20
    offset = 0

    # Perform the API call through the SDK function
    result = @controller.get_users_saved_shows(limit: limit, offset: offset)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Save one or more shows to current Spotify user's library.
  #
  def test_save_shows_user
    # Parameters for the API call
    ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'
    body = nil

    # Perform the API call through the SDK function
    @controller.save_shows_user(ids, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Delete one or more shows from current Spotify user's library.
  #
  def test_remove_shows_user
    # Parameters for the API call
    ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'
    market = 'ES'
    body = nil

    # Perform the API call through the SDK function
    @controller.remove_shows_user(ids, market: market, body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
  end

  # Check if one or more shows is already saved in the current Spotify user's library.
  #
  def test_check_users_saved_shows
    # Parameters for the API call
    ids = '5CfCWKI5pZ28U0uOzXkDHe,5as3aKmN2k11yfDDDSrvaZ'

    # Perform the API call through the SDK function
    result = @controller.check_users_saved_shows(ids)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)
    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(ComparisonHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    assert_equal("[\r\n  false,\r\n  true\r\n]", @response_catcher.response.raw_body)
  end

end